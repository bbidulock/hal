<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter id="device-properties">
  <title>Device Properties</title>
  <para>
    Properties are arranged in a namespaces using ''.'' as a separator
    and are key/value pairs. The value may assume different types; currently
    int32, double, bool, UTF8 strings and UTF8 string lists are supported.
    The key of a property is always an ASCII string without any whitespace.
    When a property changes, HAL will emit a D-Bus signal that applications
    can catch.
  </para>

  <sect1 id="properties-general">
    <title>General Properties</title>
    <para>
      The section represents properties that aren't tied to either
      physical or functional characteristics of what the device
      object represents.
    </para>
    <sect2 id="device-properties-info">
      <title>
        info namespace
      </title>
      <para>
        The <literal>info</literal> namespace contain properties that
        can be considered metadata about device objects. These
        properties are always available.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>info.subsystem</literal> (string)
              </entry>
              <entry>pci, usb, ide_host, ide, block, usb, usbif, scsi_host, scsi</entry>
              <entry>Yes</entry>
              <entry>Describes what subsystem the device is connected to</entry>
            </row>
            <row>
              <entry>
                <literal>info.udi</literal> (string)
              </entry>
              <entry>example: /org/freedesktop/Hal/devices/pci_10ec_8139</entry>
              <entry>Yes</entry>
              <entry>The HAL unique device id</entry>
            </row>
            <row>
              <entry>
                <literal>info.capabilities</literal> (strlist)
              </entry>
              <entry>example: 'block, storage, storage.cdrom'</entry>
              <entry>No</entry>
              <entry>A string list of capabilities describing what the devices does</entry>
            </row>
            <row>
              <entry>
                <literal>info.category</literal> (string)
              </entry>
              <entry>example: storage.cdrom</entry>
              <entry>No</entry>
              <entry>The prominent capability describing what the device is</entry>
            </row>
            <row>
              <entry>
                <literal>info.product</literal> (string)
              </entry>
              <entry>examples: ''SleekKeyboard'', ''MouseMan 2003'', ''Volume'', ''LS-120 SLIM3 00 UHD Floppy''</entry>
              <entry>No</entry>
              <entry>The name of the device; should not be used in any UI; use subsystem / capability specific properties instead.</entry>
            </row>
            <row>
              <entry>
                <literal>info.vendor</literal> (string)
              </entry>
              <entry>examples: Logitch, Mustek</entry>
              <entry>No</entry>
              <entry>The name of the vendor of the device; should not be used in any UI; use subsystem / capability specific properties instead.</entry>
            </row>
            <row>
              <entry>
                <literal>info.parent</literal> (string)
              </entry>
              <entry>example: /org/freedesktop/Hal/devices/computer</entry>
              <entry>Yes, for all non-root device objects</entry>
              <entry>The UDI of the device object that this device object
                is connected to.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.locked</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If this property is available and set
                to <literal>TRUE</literal> it means that a process
                is using the device that the hal device object in
                question represents and no other process should attempt
                to use or configure the device. The lock is only
                advisory.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.locked.reason</literal> (string)
              </entry>
              <entry>
                example: ''The optical drive is currently being used to
                record a CD-RW disc.''
              </entry>
              <entry>
                Only available if <literal>info.locked</literal> is set
                to <literal>TRUE</literal>.
              </entry>
              <entry>A localized text suitable for UI display</entry>
            </row>
            <row>
              <entry>
                <literal>info.locked.dbus_service</literal> (string)
              </entry>
              <entry>example: :1.278</entry>
              <entry>
                Only available if <literal>info.locked</literal> is set
                to <literal>TRUE</literal>.
              </entry>
              <entry>The base D-BUS service of the process holding the lock.</entry>
            </row>
            <row>
              <entry>
                <literal>info.is_recalled</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                This is set if the hardware may be recalled and should
                be checked for any potential problem.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.recall.vendor</literal> (string)
              </entry>
              <entry>Dell, Sony, HP, Panasonic, etc.</entry>
              <entry>Yes, if <literal>info.is_recalled</literal> is TRUE</entry>
              <entry>
                The vendor responsible for the hardware recall.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.recall.website_url</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes, if <literal>info.is_recalled</literal> is TRUE</entry>
              <entry>
                Users should check this website for more details and if their
                hardware may affected by any possible fault.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

    </sect2>
    <sect2 id="device-properties-info-callouts">
      <title>Callouts</title>
      
      <para>
        Callouts are programs invoked when the device object are added
        and removed. As such, callouts can be used to maintain
        system-wide policy (that may be specific to the particular OS)
        such as changing permissions on device nodes, updating the
        systemwide
        <literal>/etc/fstab</literal> file or configuring the networking
        subsystem.
      </para>
      <para>
        There are three different classes of callouts. A callout
        involves sequentially invoking all executable programs in the
        string list in listed order.
      </para>
      
      <para>
        All callouts are searched for and execute in a minimal
        environment. In addition, the UDI of the device object is
        exported in the environment
        variable <literal>UDI</literal>. All properties of the device
        object are exported in the environment prefixed
        with <literal>HAL_PROP_</literal>. If a device is added or
        removed is exported in the environment
        variable <literal>HALD_ACTION
        </literal>. The search path for the callout includes the
        following paths:
      </para>

      <orderedlist>
        <listitem> 
	  <para>
            <literal>$libexecdir</literal> (typically <literal>/usr/libexec</literal> (e.g. Red Hat) or  <literal>/usr/lib/hal</literal> (e.g. Debian))
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>$libdir/hal/scripts</literal> (typically <literal>/usr/lib/hal/scripts</literal> or 
            <literal>/usr/lib64/hal/scripts</literal>)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>$bindir/</literal> (typically <literal>/usr/bin</literal>)
          </para>
        </listitem>
      </orderedlist>

      <para>
        including $PATH the HAL daemon was started with during system
        initialization. Depending on the distribution, this typically
        includes <literal>/sbin</literal>, 
        <literal>/usr/sbin</literal>, 
        <literal>/bin</literal>, 
        <literal>/usr/sbin</literal>. If the program to run is not
        found in any of these paths, the it <emphasis>will
        not</emphasis> run even if the given path is absolute. To be
        portable across operating systems, third party packages
        providing callouts must therefore only
        use <literal>$libdir/hal/scripts</literal>.
      </para>
        
      <para>
        If ConsoleKit support is enabled, the variables
        <literal>CK_NUM_SEATS</literal> (number of seats),        
        <literal>CK_NUM_SESSIONS</literal> (number of sessions),        
        <literal>CK_SEATS</literal> (tab sep. list of seat-id's),
        <literal>CK_SEAT_seat-id</literal> (tab sep. list of session-id's for a seat),
        <literal>CK_SEAT_NUM_SESSIONS_seat-id</literal> (number of sessions on a seat),        
        <literal>CK_SESSION_SEAT_session-id</literal> (the seat that a session belongs to) and
        <literal>CK_SESSION_IS_ACTIVE_session-id</literal> (whether a given session is active) and
        <literal>CK_SESSION_UID_session-id</literal> (the user of the session) and
        <literal>CK_SESSION_IS_LOCAL_session-id</literal> (whether a session is local),
        <literal>CK_SESSION_HOSTNAME_session-id</literal> (host name of session's display if it's not local),
        will be exported as well. Example:
      </para>

      <programlisting>
CK_NUM_SEATS=1
CK_NUM_SESSIONS=2
CK_SEATS=Seat1
CK_SEAT_Seat1=Session1  Session3
CK_SEAT_NUM_SESSIONS_Seat1=2
CK_SESSION_IS_ACTIVE_Session1=true
CK_SESSION_IS_ACTIVE_Session3=false
CK_SESSION_IS_LOCAL_Session1=true
CK_SESSION_IS_LOCAL_Session3=true
CK_SESSION_SEAT_Session1=Seat1
CK_SESSION_SEAT_Session3=Seat1
CK_SESSION_UID_Session1=500
CK_SESSION_UID_Session3=501
      </programlisting>
      
      <para>
        Note that all ConsoleKit object paths given are just base
        names; the real D-Bus object path can be reconstructed by
        appending <literal>/org/freedesktop/ConsoleKit/</literal>
        prepended to the given identifer.
      </para>

      <para>
        The HAL daemon is not suspended while callouts are executing. Thus,
        callouts can communicate with the HAL daemon using the D-BUS network
        API. Hence, one application of callouts is to merge or modify
        properties on a device object.
      </para>

      <para>
        To reduce round trips and increase privacy, callouts can (and
        should) communicate with the HAL daemon using a peer to peer
        D-Bus connection specified by
        the <literal>HALD_DIRECT_ADDR</literal> environment
        variable. There is convience API in libhal to do this.
      </para>
      
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>info.callouts.add</literal> (string list)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                A string list with the programs which should be
                executed (with <literal>HALD_ACTION=add</literal>)
                when the device is added to the GDL (global device
                list) but just before it is announced through the
                D-BUS network API.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.callouts.remove</literal> (string list)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                A string list with the programs that should be
                executed (with <literal>HALD_ACTION=remove</literal>)
                when the device is removed from the GDL (global device
                list). The device isn't removed before the last
                callout has finished.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.callouts.preprobe</literal> (string list)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                A string list with the programs that should be
                executed
                (with <literal>HALD_ACTION=preprobe</literal>) before
                the device is probed (e.g. investigated) and can be
                used to avoid causing unnecessary I/O.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.callouts.session_add</literal> (string list)
              </entry>
              <entry/>
              <entry>No</entry>
              <entry>
                A string list with all programs that should be
                executed
                (with <literal>HALD_ACTION=session_add</literal>) when
                a session is added. Can only be set on the root
                computer device object.  The environment also contains
                the variables
	        <literal>HALD_SESSION_ADD_SESSION_ID</literal>, 
	        <literal>HALD_SESSION_ADD_SESSION_UID</literal> and
	        <literal>HALD_SESSION_ADD_SESSION_IS_ACTIVE</literal>
	        to identify the session. This is only used when HAL is
	        built with ConsoleKit support.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.callouts.session_remove</literal> (string list)
              </entry>
              <entry/>
              <entry>No</entry>
              <entry>
                A string list with all programs which should be
                executed
                (with <literal>HALD_ACTION=session_remove</literal>)
                when a session is removed. Can only be set on the root
                computer device object.  The environment also contains
                the variables
	        <literal>HALD_SESSION_REMOVE_SESSION_ID</literal>, 
	        <literal>HALD_SESSION_REMOVE_SESSION_UID</literal> and
	        <literal>HALD_SESSION_REMOVE_SESSION_IS_ACTIVE</literal>
	        to identify the session. This is only used when HAL is
	        built with ConsoleKit support.
              </entry>
            </row>
            
          </tbody>
        </tgroup>
      </informaltable>
      
    </sect2>
    <sect2 id="device-properties-info-addons">
      <title>Addons</title>
      
      <para>
        Addons are programs that run for the life time of the device
        object. They are searched for and execute in the same
        environment as callouts
        (e.g. with <literal>HAL_PROP_*</literal> set in the
        environment to represent the device properties) and are
        launched just before the device is announced on D-Bus (but
        just after the last add callouts have finished). When the
        device object goes away, HAL will send
        a <literal>SIGTERM</literal> to the process.
      </para>
      
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>info.addons</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                List of programs to run when device is added. Each
                program will need to call
                the <literal>AddonIsReady()</literal> method in order
                for the device to show up on D-Bus.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      
    </sect2>
    <sect2 id="device-properties-info-singleton-addons">
      <title>Singleton Addons</title>
      
      <para>
        Singleton Addons are programs that are started by HAL to
        handle a set of devices. They are identified by the command line
        used to start them. They MUST implement the
	<link linkend="interface-singleton-addon">
	  <literal>org.freedesktop.Hal.SingletonAddon</literal>
	</link>
	interface.  on the path
	<literal>/org/freedesktop/Hal/Singleton</literal> path on
        the direct connection to the HAL daemon.
      </para>
      <para>
        When a device is added with an <literal>info.addons.singleton</literal>
        string list key, the elements of that key are used as the command line
        to start the singleton if the singleton is not already running.
        Once the singleton has called <literal>SingletonAddonIsReady</literal> on
	<link linkend="interface-manager">
	  <literal>org.freedesktop.Hal.Manager</literal>
	</link> interface, it will receive
	<literal>DeviceAdded</literal> calls on its
	<link linkend="interface-singleton-addon">
	  <literal>org.freedesktop.Hal.SingletonAddon</literal>
	</link>
        interface for all devices that have
        its commandline in <literal>info.addons.singletona</literal>.
      </para>
      <para>
        If a device is added and the singleton specified in
        <literal>info.addons.singleton</literal> is already running, the
        singleton will recieve <literal>DeviceAdded</literal> on its
	<link linkend="interface-singleton-addon">
	  <literal>org.freedesktop.Hal.SingletonAddon</literal>
	</link>
	interface for that new device.  </para>
      <para>
        When a device is removed that is being handled by a singleton, the
	singleton will recieve <literal>DeviceRemoved</literal> on
	<link linkend="interface-singleton-addon">
	  <literal>org.freedesktop.Hal.SingletonAddon</literal>
	</link>.
	When it is no longer handling any more devices it should exit cleanly.
      </para>
      
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>info.addons.singleton</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                A list of commandlines for singleton addons which should
                service this device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      
    </sect2>
     <sect2 id="device-properties-info-method-calls">
      <title>Method calls</title>
      
      <para>
        Method calls on a specific interface on a device object can be
        implemented by the HAL daemon running a program. Note that
        this is not the only way to implement support for method
        calls; if you expect a lot of method calls it is preferable to
        implement an addon and use
        the <literal>ClaimInterface()</literal> API since it reduces
        the overhead of spawning a process and it can handle both
        complex incoming and return types as well. See <xref linkend="interface-device"/> for
        details on claiming interfaces via an addon..
      </para>
      
      <para>
        Note that method calls implemented via running a program are
        limited to the return type being an a signed 32-bit integer
        (this will change in a future release). The incoming
        parameters are limited to only basic types and arrays of
        strings. The parameters are passed via stdin using a textual
        representation. As such, there is a lot of overhead with
        handling method calls by spawning programs and as such it
        should only be used for situtations where the nature of the
        method call is that it will not be frequently used.
      </para>
      
      <para>
        As with addons, method calls are searched for and execute in
        the same minimal environment as callouts
        (e.g. with <literal>HAL_PROP_*</literal> set in the
        environment to represent the device properties) and in
        addition the environment variables
        <literal>HAL_METHOD_INVOKED_BY_UID</literal> (the uid of the caller)
        and
        <literal>HAL_METHOD_INVOKED_BY_SYSTEMBUS_CONNECTION_NAME</literal>
        (the unique system bus connection name of the caller) are
        set. Additionally, if HAL is built with ConsoleKit support, 
        <literal>HAL_METHOD_INVOKED_BY_PID</literal> and
        <literal>HAL_METHOD_INVOKED_BY_SELINUX_CONTEXT</literal> (but
        only if the running system have SELinux enabled) will be
        set. If HAL itself, or a HAL addon, is invoking a method, then
        these variables will not be present. Here's an example
      </para>

      <programlisting>
HAL_METHOD_INVOKED_BY_UID=500
HAL_METHOD_INVOKED_BY_PID=22553
HAL_METHOD_INVOKED_BY_SELINUX_CONTEXT=user_u:system_r:unconfined_t
HAL_METHOD_INVOKED_BY_SYSTEMBUS_CONNECTION_NAME=:1.138
      </programlisting>

      <para>
        In addition, with ConsoleKit
        support, <literal>HAL_METHOD_INVOKED_BY_SESSION</literal> will
        be set to (the basename) of the ConsoleKit session object path
        but only if the caller is in a session. The method handler can
        then use the previously
        mentioned <literal>CK_SESSION_*</literal> to learn everything
        about the context of the caller.
        
      </para>

      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>info.interfaces</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                A list of D-Bus interfaces that the device object
                supports apart from the
                standard <literal>org.freedesktop.Hal.Device</literal>
                interface.
              </entry>
            </row>
            
            <row>
              <entry>
                <literal>&#60;iface&#62;.method_names</literal> (strlist)
              </entry>
              <entry>example: <literal>'Foo', 'Bar', 'Baz'</literal></entry>
              <entry>No</entry>
              <entry>
                If a D-Bus interface is implemented by executing a
                program for every method, this property contains an
                ordered list of the method names. 
              </entry>
            </row>
            
            <row>
              <entry>
                <literal>&#60;iface&#62;.method_argnames</literal> (strlist)
              </entry>
              <entry>example: <literal>'foo_arg1 foo_arg2', '', 'baz_arg1'</literal></entry>
              <entry>No</entry>
              <entry>
                This property contains the names of the arguments for
                each method. Each entry is a white-space separated
                list for that particular method.
              </entry>
            </row>
            
            <row>
              <entry>
                <literal>&#60;iface&#62;.method_signatures</literal> (strlist)
              </entry>
              <entry>example: <literal>'si', '', 'as'</literal></entry>
              <entry>No</entry>
              <entry>
                This property contains the D-Bus signature for each
                method. The signature should only cover incoming
                arguments; each method is defined as returning an
                integer.
              </entry>
            </row>
            
            <row>
              <entry>
                <literal>&#60;iface&#62;.method_execpaths</literal> (strlist)
              </entry>
              <entry>example: <literal>'foo-binary', 'bar-binary', 'baz-binary'</literal></entry>
              <entry>No</entry>
              <entry>
                This property contains the name of the program to
                execute when this method is called. The return code
                of the program will be passed as the integer result
                to the D-Bus caller. 
                
                If a program wants to return an error, it just needs
                to write two lines to stderr; the first line is the
                exception name to throw and the second line is the
                exception detail.
              </entry>
            </row>
            
          </tbody>
        </tgroup>
      </informaltable>
      
      <para>
        Items in the <literal>&#60;iface&#62;.*</literal> clearly must
        correspond with each other. The whole mechanism is best
        explained by an example:
          
        <programlisting>
info.interfaces = {'org.freedesktop.Hal.Device.Volume'}
org.freedesktop.Hal.Device.Volume.method_argnames = {'mount_point fstype extra_options', 'extra_options', 'extra_options'}
org.freedesktop.Hal.Device.Volume.method_execpaths = {'hal-storage-mount', 'hal-storage-unmount', 'hal-storage-eject'}
org.freedesktop.Hal.Device.Volume.method_names = {'Mount', 'Unmount', 'Eject'}
org.freedesktop.Hal.Device.Volume.method_signatures = {'ssas', 'as', 'as'}
        </programlisting>
        
        which, for example, shows that the <literal>Mount()</literal>
        method on the
        interface <literal>org.freedesktop.Hal.Device.Volume</literal>
        takes three arguments: <literal>mount_point</literal> (a
        string), <literal>fstype</literal> (a string)
        and <literal>extra_options</literal> (an array of strings).
        
      </para>
    </sect2>

  </sect1>

  <sect1 id="properties-subsystem">
    <title>Subsystem-Specific Properties</title>
    <para>
      In this section properties for device objects that represent
      addressable hardware is described. Availability of
      these depends on the value of the <literal>info.subsystem</literal>
      property.  These properties are not of particular interest to
      application developers, instead they are useful for libraries
      and userspace drivers that needs to interact with the device
      given a UDI. Knowledge of various subsystem-specific
      technologies is assumed for this section to be useful.
    </para>
    <sect2 id="device-properties-pci">
      <title>
        pci namespace
      </title>
      <para>
        This namespace contains properties for device objects representing
        functions on devices on a PCI bus. These properties are available
        exactly when <literal>info.subsystem</literal> equals <literal>pci</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pci.device_class</literal> (int)
              </entry>
              <entry>example: 3</entry>
              <entry>Yes</entry>
              <entry>Device Class</entry>
            </row>
            <row>
              <entry>
                <literal>pci.device_subclass</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>PCI Device Sub Class</entry>
            </row>
            <row>
              <entry>
                <literal>pci.device_protocol</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Device Protocol</entry>
            </row>
            <row>
              <entry>
                <literal>pci.product_id</literal> (int)
              </entry>
              <entry>example: 0x4c4d</entry>
              <entry>Yes</entry>
              <entry>Product ID</entry>
            </row>
            <row>
              <entry>
                <literal>pci.vendor_id</literal> (int)
              </entry>
              <entry>example: 0x1002</entry>
              <entry>Yes</entry>
              <entry>Vendor ID</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_product_id</literal> (int)
              </entry>
              <entry>example: 0x009e</entry>
              <entry>Yes</entry>
              <entry>Subsystem product id</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_vendor_id</literal> (int)
              </entry>
              <entry>example: 0x1028</entry>
              <entry>Yes</entry>
              <entry>Subsystem vendor id</entry>
            </row>
            <row>
              <entry>
                <literal>pci.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:01/0000:01:00.0</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pci.product</literal> (string)
              </entry>
              <entry>Rage Mobility P/M AGP 2x</entry>
              <entry>No</entry>
              <entry>Name of the product per the PCI database</entry>
            </row>
            <row>
              <entry>
                <literal>pci.vendor</literal> (string)
              </entry>
              <entry>ATI Technologies Inc</entry>
              <entry>No</entry>
              <entry>Name of the vendor per the PCI database</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_product</literal> (string)
              </entry>
              <entry>Inspiron 7500</entry>
              <entry>No</entry>
              <entry>Name of the subsystem product per the PCI database</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_vendor</literal> (string)
              </entry>
              <entry>Dell Computer Corporation</entry>
              <entry>No</entry>
              <entry>Name of the subsystem vendor per the PCI database</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        (FIXME: Some key PCI information (bus, slot, port, function
        etc.) is missing here)
      </para>
    </sect2>
    <sect2 id="device-properties-serialif">
      <title>
        serial namespace
      </title>
      <para>
        Device objects that represent serial devices (e.g. /dev/ttyS* or
        /dev/ttyUSB*).
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>serial.originating_device</literal> (string)
              </entry>
              <entry>
                example: <literal>/org/freedesktop/Hal/devices/pnp_PNP0501</literal>
              </entry>
              <entry>Yes</entry>
              <entry>UDI of the device the serial device is bound to.</entry>
            </row>
            <row>
              <entry>
                <literal>serial.device</literal> (string)
              </entry>
              <entry>example: /dev/ttyS0</entry>
              <entry>Yes</entry>
              <entry>The device node to access the OSS device.</entry>
            </row>
            <row>
              <entry>
                <literal>serial.port</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>
                The port number of the device, based on the number in
                <literal>serial.device</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>serial.type</literal> (string)
              </entry>
              <entry>example: platform, usb, unknown</entry>
              <entry>Yes</entry>
              <entry>This property defines the type of the serial device.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-pnpif">
      <title>
        pnp namespace
      </title>
      <para>
        Device objects that represent Plug and Play (PnP) devices (e.g. System Board or PS/2 Port for PS/2-style Mice).
        For these devices info.subsystem is set to 'pnp'.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pnp.id</literal> (string)
              </entry>
              <entry> example: PNP0a03 or SMCf010</entry>
              <entry>Yes</entry>
              <entry>This property contains the PnP ID of the device.</entry>
            </row>
            <row>
              <entry>
                <literal>pnp.description</literal> (string)
              </entry>
              <entry> example: 'ECP printer port'</entry>
              <entry>No</entry>
              <entry>
		Description from the pnp.ids file. Only available if: HAL was compiled with 
		support for pnp.ids, if the file is available and if the ID was part of the file.
	      </entry>
            </row>
            <row>
              <entry>
                <literal>pnp.serial.irq</literal> (int)
              </entry>
              <entry> example: 5</entry>
              <entry>No</entry>
              <entry>
		Only available if the PnP device is a serial device (as e.g. serial Wacom Tablet devices).
		Contains the prefered irq of the device.
	      </entry>
            </row>
            <row>
              <entry>
                <literal>pnp.serial.port</literal> (string)
              </entry>
              <entry> example: 0x200</entry>
              <entry>No</entry>
              <entry>
		Only available if the PnP device is a serial device (as e.g. serial Wacom Tablet devices).
		contains info about the prefered serial port of the device.
	      </entry>
            </row>
            <row>
              <entry>
                <literal>pnp.serial.baud_base</literal> (int)
              </entry>
              <entry> example: 38400</entry>
              <entry>No</entry>
              <entry>
		Only available if the PnP device is a serial device (as e.g. serial Wacom Tablet devices).
		Contains info about the needed baud_base to setup the device correctly.
	      </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-modemif">
      <title>
        modem namespace
      </title>
      <para>
        Serial device objectes that are known to be modems should also gain the
        <literal>modem</literal> capability in their
        <literal>info.capabilities</literal> list.  Modem device objects must
        also be serial device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>modem.command_sets</literal> (string)
              </entry>
              <entry>example: GSM-07.07, GSM-07.05</entry>
              <entry>Yes</entry>
              <entry>This property defines the command sets the modem device supports.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>IS-707-A</entry>
              <entry>Yes</entry>
              <entry>This modem supports the IS-707-A standard AT commands (commonly used by CDMA cellular devices).  Implies V.250 support.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>GSM-07.07</entry>
              <entry>Yes</entry>
              <entry>This modem supports the GSM-07.07 standard AT commands (commonly used by GSM-based cellular devices).  Implies V.250 support.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>GSM-07.05</entry>
              <entry>Yes</entry>
              <entry>This modem supports the GSM-07.05 standard AT commands (commonly used by GSM-based cellular devices).  Implies V.250 support.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>ITU-V.250</entry>
              <entry>Yes</entry>
              <entry>This modem supports the ITU V.250 standard AT commands (also known as Hayes-compatible).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-usb">
      <title>
        usb_device namespace
      </title>
      <para>
        For device objects representing USB devices the property
        <literal>info.subsystem</literal> will be <literal>usb_device</literal>,
        and the following properties will be available. Note that the
        corresponding USB interfaces are represented by separate
        device objects as children.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>usb_device.bus_number</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>The USB bus the device is attached to</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.configuration_value</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>The current configuration the USB device is in;
                starting from 1
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.configuration</literal> (int)
              </entry>
              <entry>example: Bulk transfer configuration</entry>
              <entry>No</entry>
              <entry>Human-readable description of the current configuration the USB device is in
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.num_configurations</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Number of configurations this USB device
                can assume
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_class</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>USB Device Class</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_subclass</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>USB Device Sub Class</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_protocol</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>USB Device Protocol</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.is_self_powered</literal> (bool)
              </entry>
              <entry>example: false</entry>
              <entry>Yes</entry>
              <entry>The device, in the current configuration, is self
                powered
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.can_wake_up</literal> (bool)
              </entry>
              <entry>example: true</entry>
              <entry>Yes</entry>
              <entry>The device, in the current configuration, can wake up</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.max_power</literal> (int)
              </entry>
              <entry>example: 98</entry>
              <entry>Yes</entry>
              <entry>Max power drain of device, in mA</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.num_interfaces</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Number of USB Interfaces in the current configuration</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.num_ports</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Number of ports on a hub. Zero for non-hubs</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.port_number</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>The port number on the parent hub that the device is attached to, starting from 1</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.speed</literal> (double)
              </entry>
              <entry>examples: 1.5, 12.0, 480.0</entry>
              <entry>Yes</entry>
              <entry>Speed of device, in Mbit/s</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.version</literal> (double)
              </entry>
              <entry>examples: 1.0, 1.1, 2.0</entry>
              <entry>Yes</entry>
              <entry>USB version of device</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.level_number</literal> (int)
              </entry>
              <entry>example: 2</entry>
              <entry>Yes</entry>
              <entry>Depth in USB tree, where the virtual root hub
                is at depth 0
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.linux.device_number</literal> (string)
              </entry>
              <entry>example: 19</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>USB Device Number as assigned by the Linux kernel</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.linux.parent_number</literal> (string)
              </entry>
              <entry>example: 19</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>Device number of parent device as assigned by the
                Linux kernel
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:07.2/usb1/1-1/1-1.1</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.product_id</literal> (int)
              </entry>
              <entry>example: 0x3005</entry>
              <entry>Yes</entry>
              <entry>USB Product ID</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.vendor_id</literal> (int)
              </entry>
              <entry>example: 0x04b3</entry>
              <entry>Yes</entry>
              <entry>USB Vendor ID</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_revision_bcd</literal> (int)
              </entry>
              <entry>example: 0x0100</entry>
              <entry>Yes</entry>
              <entry>Device Revision Number encoded in BCD with two decimals</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>A string uniquely identifying the instance
                of the device; ie. it will be different for two devices
                of the same type. Note that the serial number is broken
                on some USB devices.
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.product</literal> (string)
              </entry>
              <entry>example: IBM USB HUB KEYBOARD</entry>
              <entry>No</entry>
              <entry>Name of the product per the USB ID Database</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.vendor</literal> (string)
              </entry>
              <entry>example: IBM Corp.</entry>
              <entry>No</entry>
              <entry>Name of the vendor per the USB ID Database</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-usbif">
      <title>
        usb namespace
      </title>
      <para>
        Device objects that represent USB interfaces, ie. when
        <literal>info.subsystem</literal> assumes <literal>usb</literal>,
        are represented by the properties below. In addition all
        the <literal>usb_device.*</literal> properties from the parent
        USB device is available in this namespace but only with
        the <literal>usb</literal> prefix instead of
        <literal>usb_device</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>usb.interface.class</literal> (int)
              </entry>
              <entry>example: 0x03</entry>
              <entry>Yes</entry>
              <entry>USB Class for the interface</entry>
            </row>
            <row>
              <entry>
                <literal>usb.interface.subclass</literal> (int)
              </entry>
              <entry>example: 0x01</entry>
              <entry>Yes</entry>
              <entry>USB Sub Class for this interface</entry>
            </row>
            <row>
              <entry>
                <literal>usb.interface.protocol</literal> (int)
              </entry>
              <entry>example: 0x01</entry>
              <entry>Yes</entry>
              <entry>USB Protocol for the interface</entry>
            </row>
            <row>
              <entry>
                <literal>usb.interface.description</literal> (int)
              </entry>
              <entry>example: SyncML interface</entry>
              <entry>No</entry>
              <entry>Human-readable description for the interface provided by the device</entry>
            </row>
            <row>
              <entry>
                <literal>usb.interface.number</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Number of this interface, starting from zero</entry>
            </row>
            <row>
              <entry>
                <literal>usb.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:07.2/usb1/1-1/1-1.1/1-1.1:1.0</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-platform">
      <title>
        platform namespace
      </title>
      <para>
        Devices that are built into the platform or present on busses that
        cannot be properly enumerated (e.g. ISA) are represented by device
        objects where <literal>info.subsystem</literal> equals
        <literal>platform</literal>. These kind of devices are commonly,
        somewhat incorrectly, called legacy devices.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>platform.id</literal> (string)
              </entry>
              <entry>example: serial</entry>
              <entry>Yes</entry>
              <entry>Device identification</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ide-host">
      <title>
        ide_host namespace
      </title>
      <para>
        The <literal>ide_host</literal> namespace is present for
        device objects where <literal>info.subsystem</literal> is set
        to <literal>ide_host</literal>.  Such device objects represent
        IDE and ATA host adaptors for harddisks and optical drives as
        found in the majority of computer systems.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ide_host.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>A unique number identifying the IDE host adaptor</entry>
            </row>
            <row>
              <entry>
                <literal>ide_host.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:07.1/ide0</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ide">
      <title>
        ide namespace
      </title>
      <para>
        ATA and IDE drives are represented by device objects where
        <literal>info.subsystem</literal> equals <literal>ide</literal>. The
        following properties are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ide.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Corresponds
                to <literal>ide_host.host_number</literal> of
                the <literal>ide_host</literal> device that is the
                parent of this device object
              </entry>
            </row>
            <row>
              <entry>
                <literal>ide.channel</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Identifies the IDE channel of the host interface</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-scsi_host">
      <title>
        scsi_host namespace
      </title>
      <para>
        The <literal>scsi_host</literal> namespace is present for
        device objects where <literal>info.subsystem</literal> is set
        to <literal>scsi_host</literal>.  Such device objects represent
        SCSI host adaptors for SCSI devices as found in some computer
        systems.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>scsi_host.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>A unique number identifying the SCSI host adaptor</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-scsi">
      <title>
        scsi namespace
      </title>
      <para>
        SCSI devices are represented by device objects where
        <literal>info.subsystem</literal> equals <literal>scsi</literal>.
        The following properties are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>scsi.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Corresponds to <literal>scsi_host.host</literal>
                of the <literal>scsi_host</literal> device that is the
                parent of this device object
              </entry>
            </row>
            <row>
              <entry>
                <literal>scsi.bus</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>SCSI channel number</entry>
            </row>
            <row>
              <entry>
                <literal>scsi.target</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>SCSI identifier number</entry>
            </row>
            <row>
              <entry>
                <literal>scsi.lun</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>SCSI Logical Unit Number</entry>
            </row>
            <row>
              <entry>
                <literal>scsi.type</literal> (string)
              </entry>
              <entry>Example: disk</entry>
              <entry>Yes</entry>
              <entry>SCSI device type</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cdrom</entry>
              <entry></entry>
              <entry>This is a SCSI cdrom device.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>comm</entry>
              <entry></entry>
              <entry>This is a SCSI communication device.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>disk</entry>
              <entry></entry>
              <entry>This is a SCSI disk device.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>medium_changer</entry>
              <entry></entry>
              <entry>This is a SCSI media changer (e.g. for CD/Tape).</entry>
            </row>
            <row>
              <entry></entry>
              <entry>printer</entry>
              <entry></entry>
              <entry>This is a SCSI printer.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>processor</entry>
              <entry></entry>
              <entry>This is a SCSI processor device.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>raid</entry>
              <entry></entry>
              <entry>This is a SCSI raid device.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>scanner</entry>
              <entry></entry>
              <entry>This is a SCSI scanner.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>tape</entry>
              <entry></entry>
              <entry>This is a SCSI tape device.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>unknown</entry>
              <entry></entry>
              <entry>The type of this SCSI device is unknwon.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ieee1394_host">
      <title>
        ieee1394_host namespace
      </title>
      <para>
        Device objects with <literal>info.subsystem</literal> set to
        <literal>ieee1394_host</literal> represent IEEE 1394 host
        adaptors. The following properties are available for such
        device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ieee1394_host.is_busmgr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.is_irn</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.is_root</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.node_count</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.nodes_active</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ieee1394_node">
      <title>
        ieee1394_node namespace
      </title>
      <para>
        Device objects with <literal>info.subsystem</literal> set to
        <literal>ieee1394_node</literal> represent IEEE 1394 nodes on
        a IEEE 1394 bus. The following properties are available for
        such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ieee1394_node.capabilities</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.guid</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.nodeid</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.vendor</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.vendor_id</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ieee1394">
      <title>
        ieee1394 namespace
      </title>
      <para>
        Device objects with <literal>info.subsystem</literal> set to
        <literal>ieee1394</literal> represent IEEE 1394 devices. The
        following properties are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ieee1394.specifier_id</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-mmc_host">
      <title>
        mmc_host namespace
      </title>
      <para>
        Device objects with <literal>info.subsystem</literal> set to
        <literal>mmc_host</literal> represent MultiMediaCard or
        Secure Digital host adaptors. The following properties
        are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>mmc_host.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>A unique number identifying the MMC/SD host adaptor</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-mmc">
      <title>
        mmc namespace
      </title>
      <para>
        Device objects with <literal>info.subsystem</literal> set to
        <literal>mmc</literal> represent MultiMediaCard or Secure
        Digital cards. The following properties are available for
        such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>mmc.cid</literal> (string)
              </entry>
              <entry>example: 0150415330303842413a1a8083003a9d</entry>
              <entry>Yes</entry>
              <entry>Card Identification Data register (unique for every card
                in existence)
              </entry>
            </row>
            <row>
              <entry>
                <literal>mmc.csd</literal> (string)
              </entry>
              <entry>example: 005d013213598067b6d9cfff1640002d</entry>
              <entry>Yes</entry>
              <entry>Card Specific Data register</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.scr</literal> (string)
              </entry>
              <entry>example: 00a5000000410000</entry>
              <entry>Only for SD cards</entry>
              <entry>SD Card Register</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.rca</literal> (int)
              </entry>
              <entry>example: 8083</entry>
              <entry>Yes</entry>
              <entry>Card bus address</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.oem</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Card OEM distributor</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.date</literal> (string)
              </entry>
              <entry>example: 10/2003</entry>
              <entry>Yes</entry>
              <entry>Manufacturing date</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.serial</literal> (int)
              </entry>
              <entry>example: 0x3a1a8083</entry>
              <entry>Yes</entry>
              <entry>Card serial number</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.hwrev</literal> (int)
              </entry>
              <entry>example: 4</entry>
              <entry>Yes</entry>
              <entry>Hardware revision</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.fwrev</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Firmware revision</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.type</literal> (string)
              </entry>
              <entry>example: SDIO</entry>
              <entry>No</entry>
              <entry>Card type</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-sdio">
      <title>
        sdio namespace
      </title>
      <para>
        Device objects with <literal>info.subsystem</literal> set to
        <literal>sdio</literal> represent MultiMediaCard or Secure
        Digital cards with SDIO interface. The following properties
        are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>sdio.rca</literal> (int)
              </entry>
              <entry>example: 8083</entry>
              <entry>Yes</entry>
              <entry>Card bus address</entry>
            </row>
            <row>
              <entry>
                <literal>sdio.card_id</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>SDIO Class for the interface</entry>
            </row>
            <row>
              <entry>
                <literal>sdio.class_id</literal> (int)
              </entry>
              <entry>example: 0x03</entry>
              <entry>Yes</entry>
              <entry>SDIO Class for the interface</entry>
            </row>
            <row>
              <entry>
                <literal>sdio.product_id</literal> (int)
              </entry>
              <entry>example: 0x046a</entry>
              <entry>Yes</entry>
              <entry>Product ID</entry>
            </row>
            <row>
              <entry>
                <literal>sdio.vendor_id</literal> (int)
              </entry>
              <entry>example: 0x039d</entry>
              <entry>Yes</entry>
              <entry>Vendor ID</entry>
            </row>
            <row>
              <entry>
                <literal>sdio.product</literal> (string)
              </entry>
              <entry>SQN1130 WiMAX Network Card</entry>
              <entry>No</entry>
              <entry>Name of the product per the SDIO database</entry>
            </row>
            <row>
              <entry>
                <literal>sdio.vendor</literal> (string)
              </entry>
              <entry>Sequans Communications</entry>
              <entry>No</entry>
              <entry>Name of the vendor per the SDIO database</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ccw">
      <title>
        ccw namespace
      </title>
      <para>
        Device objects that represent s390 ccw devices (when <literal>info.subsystem
        </literal>
         is set to <literal>ccw</literal>) are represented by the
        properties below.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.devtype</literal> (string)
              </entry>
              <entry>example: 1732/01</entry>
              <entry>Yes</entry>
              <entry>Device type/model or n/a</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.cutype</literal> (string)
              </entry>
              <entry>example: 1731/01</entry>
              <entry>Yes</entry>
              <entry>Control unit type/model</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.cmb_enable</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>If channel measurements are enabled</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.availability</literal> (string)
              </entry>
              <entry>example: good</entry>
              <entry>Yes</entry>
              <entry>Can be one of 'good', 'boxed', 'no path',
                or 'no device'
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.online</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Online status</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.bus_id</literal> (string)
              </entry>
              <entry>example: 0.0.f588</entry>
              <entry>Yes</entry>
              <entry>The device's bus id in sysfs</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.pim</literal> (int)
              </entry>
              <entry>example: 0x80</entry>
              <entry>No</entry>
              <entry>path installed mask</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.pam</literal> (int)
              </entry>
              <entry>example: 0x80</entry>
              <entry>No</entry>
              <entry>path available mask</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.pom</literal> (int)
              </entry>
              <entry>example: 0xff</entry>
              <entry>No</entry>
              <entry>path operational mask</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.chpid0..7</literal> (int)
              </entry>
              <entry>example: 0x40</entry>
              <entry>No</entry>
              <entry>channel path ids</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is either <literal>dasd-eckd</literal>
        or <literal>dasd-fba</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.dasd.use_diag</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>If the device driver shall use diagnose calls to access
                the device
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.dasd.readonly</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>If the device can only be accessed readonly</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.dasd.discipline</literal> (string)
              </entry>
              <entry>example: ECKD</entry>
              <entry>No</entry>
              <entry>The dasd discipline used to access the device</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is <literal>zfcp</literal>. They are
        only present when <literal>ccw.online = 1</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.zfcp.in_recovery</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Shows whether the adapter is currently in recovery</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.zfcp.failed</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Shows whether the adapter is in failed state</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is of the form <literal>tape_3xxx
        </literal>
        .
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.tape.state</literal> (string)
              </entry>
              <entry>example: IN_USE</entry>
              <entry>Yes</entry>
              <entry>The current status of the tape</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.tape.operation</literal> (string)
              </entry>
              <entry>example: REW</entry>
              <entry>Yes</entry>
              <entry>A three-letter mnemonic of the current tape operation
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.tape.medium_state</literal> (string)
              </entry>
              <entry>example: no medium</entry>
              <entry>No</entry>
              <entry>
                If <literal>ccw.online = 1</literal>, shows whether a tape
                is loaded
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.tape.blocksize</literal> (int)
              </entry>
              <entry>example: 512</entry>
              <entry>No</entry>
              <entry>
                If <literal>ccw.online = 1</literal>, shows the blocksize
                used for reads and writes to the tape
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is <literal>3270</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.3270.model</literal> (int)
              </entry>
              <entry>example: 3</entry>
              <entry>Yes</entry>
              <entry>The model of the device, determining rows and columns
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.3270.rows</literal> (int)
              </entry>
              <entry>example: 32</entry>
              <entry>Yes</entry>
              <entry>The number of rows</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.3270.columns</literal> (int)
              </entry>
              <entry>example: 80</entry>
              <entry>Yes</entry>
              <entry>The number of columns</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ccwgroup">
      <title>
        ccwgroup namespace
      </title>
      <para>
        Device objects that represent groups of <literal>ccw</literal> devices
        (when <literal>info.subsystem</literal> is set to <literal>ccwgroup</literal>
        have the properties specified below.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.online</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Online status</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.bus_id</literal> (string)
              </entry>
              <entry>example: 0.0.f588</entry>
              <entry>Yes</entry>
              <entry>The device's bus id in sysfs</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>qeth</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.qeth.large_send</literal> (string)
              </entry>
              <entry>example: TSO</entry>
              <entry>No</entry>
              <entry>Whether large send is provided. Can be "no", "EDDP"
                (software) or "TSO" (hardware).
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.card_type</literal> (string)
              </entry>
              <entry>example: OSD_1000</entry>
              <entry>Yes</entry>
              <entry>Type of the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.checksumming</literal> (string)
              </entry>
              <entry>example: sw checksumming</entry>
              <entry>No</entry>
              <entry>The method used to checksum incoming packets</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.canonical_macaddr</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Specifies the token ring macaddress format. Not valid in
                layer2 mode and for ethernet devices.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.broadcast_mode</literal> (string)
              </entry>
              <entry>example: broadcast_allrings</entry>
              <entry>No</entry>
              <entry>The scope of token ring broadcasts. Not valid in layer2
                mode and for ethernet devices.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.fake_broadcast</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Whether to fake broadcast capability. Not valid in layer2
                mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.fake_ll</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Whether to add a faked link level header to packets.
                Not valid in layer2 mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.layer2</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Whether the card operates in layer 2 mode</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.portname</literal> (string)
              </entry>
              <entry>example: OSAPORT</entry>
              <entry>No</entry>
              <entry>The port name which has been specified for the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.portno</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>The relative port number on the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.buffer_count</literal> (int)
              </entry>
              <entry>example: 16</entry>
              <entry>Yes</entry>
              <entry>Number of inbound buffers used</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.add_hhlen</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>How much additional space is provided in the hardware
                header in skbs in front of packets
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.priority_queueing</literal>
                (string)
              </entry>
              <entry>example: always queue 2</entry>
              <entry>No</entry>
              <entry>Which priority queueing algorithm is to be used</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.route4</literal> (string)
              </entry>
              <entry>example: no</entry>
              <entry>No</entry>
              <entry>Whether the card has a routing functionality for ipv4.
                Not valid in layer2 mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.route6</literal> (string)
              </entry>
              <entry>example: no</entry>
              <entry>No</entry>
              <entry>Whether the card has a routing functionality for ipv6.
                Not valid in layer2 mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.state</literal> (string)
              </entry>
              <entry>example: UP (LAN ONLINE)</entry>
              <entry>Yes</entry>
              <entry>The device's current state</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>ctc</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.ctc.protocol</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>The protocol/method used by the connection</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.ctc.type</literal> (string)
              </entry>
              <entry>example: CTC/A</entry>
              <entry>Yes</entry>
              <entry>The device/connection type</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.ctc.buffer</literal> (int)
              </entry>
              <entry>example: 32768</entry>
              <entry>No</entry>
              <entry>The maximum buffer size of the connection</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>lcs</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.lcs.portnumber</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>The port on the card that is used</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.lcs.type</literal> (string)
              </entry>
              <entry>example: OSA LCS card</entry>
              <entry>Yes</entry>
              <entry>The type of the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.lcs.lancmd_timeout</literal> (int)
              </entry>
              <entry>example: 5</entry>
              <entry>Yes</entry>
              <entry>The timeout value for LAN commands in seconds</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>claw</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.claw.api_type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Determines the packing algorithm for outgoing pakets
                (matching the remote peer)
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>IP</entry>
              <entry></entry>
              <entry>Using the IP protocol</entry>
            </row>
            <row>
              <entry></entry>
              <entry>PACKED</entry>
              <entry></entry>
              <entry>Using an enhanced packing algorithm</entry>
            </row>
            <row>
              <entry></entry>
              <entry>TCPIP</entry>
              <entry></entry>
              <entry>Using the TCP/IP protocol</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.adapter_name</literal> (string)
              </entry>
              <entry>example: RS1</entry>
              <entry>Yes</entry>
              <entry>The host name of the remote communication peer.</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.host_name</literal> (string)
              </entry>
              <entry>example: LNX1</entry>
              <entry>Yes</entry>
              <entry>The host name of the local adapter.</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.read_buffer</literal> (int)
              </entry>
              <entry>example: 4</entry>
              <entry>Yes</entry>
              <entry>The number of read buffers allocated</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.write_buffer</literal> (int)
              </entry>
              <entry>example: 5</entry>
              <entry>Yes</entry>
              <entry>The number of write buffers allocated</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-iucv">
      <title>
        iucv namespace
      </title>
      <para>
        Device objects with <literal>info.subsystem</literal> set to <literal>iucv
        </literal>
         are using the "Intra-User Comminication Vehicle" and are
        described by the following properties.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>iucv.bus_id</literal> (string)
              </entry>
              <entry>example: netiucv0</entry>
              <entry>Yes</entry>
              <entry>The device's bus id in sysfs</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>iucv</literal> devices
        where <literal>linux.driver</literal> is <literal>netiucv</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>iucv.netiucv.user</literal> (string)
              </entry>
              <entry>example: linux12</entry>
              <entry>Yes</entry>
              <entry>The guest name of the connection's target</entry>
            </row>
            <row>
              <entry>
                <literal>iucv.netiucv.buffer</literal> (int)
              </entry>
              <entry>example: 32768</entry>
              <entry>Yes</entry>
              <entry>The maximum buffer size of the connection</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-block">
      <title>
        block namespace
      </title>
      <para>
        Device objects representing addressable block devices, such as
        drives and partitions, will have <literal>info.subsystem</literal>
        set to <literal>block</literal> and will export a number of
        properties in the <literal>block</literal> namespace.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>block.device</literal> (string)
              </entry>
              <entry>example: /dev/sda </entry>
              <entry>Yes</entry>
              <entry>Special device file to interact with the block device</entry>
            </row>
            <row>
              <entry>
                <literal>block.major</literal> (int)
              </entry>
              <entry>example: 8</entry>
              <entry>Yes</entry>
              <entry>Major number of special file to interact with the
                device
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.minor</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Minor number of special file to interact with the
                device
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.is_volume</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>True only when the block device is a volume that can
                be mounted into the file system. In this case the
                <literal>volume</literal> capability will be set and
                thus, properties, in the <literal>volume</literal>
                namespace are available.
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.no_partitions</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>For toplevel block devices, this is TRUE only
                when no known partition tables have been found on the
                media (In this case, if the storage device contain a
                file system it will be accessible using the same
                special device file as the one for this device object
                and the device object representing the filesystem will
                appear as a separate device object as a child). For
                the child, that is
                when <literal>block.is_volume</literal> is true, this
                property is TRUE exactly when it was created for a
                storage device with
                the <literal>storage.no_partitions_hint</literal> set
                to TRUE.
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.have_scanned</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                An internal property used by HAL to specify whether a top
                level block device have already been scanned for filesystems.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-xen">
      <title>xen namespace</title>
      <para>
	Device objects representing virtual devices under the Xen
	Virtual Machine Monitor, such as frontend network or block
	devices, will have <literal>info.subsystem</literal> set to
	<literal>block</literal> and will export a number of
	properties in then <literal>xen</literal> namespace.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>xen.bus_id</literal> (string)</entry>
              <entry>example: vif-0 </entry>
              <entry>Yes</entry>
              <entry>The XenBus ID of the device</entry>
            </row>
            <row>
              <entry><literal>xen.path</literal> (string)</entry>
              <entry>example: device/vif/0 </entry>
              <entry>Yes</entry>
              <entry>The XenBus path of the device</entry>
            </row>
            <row>
              <entry><literal>xen.type</literal> (string)</entry>
              <entry>example: vif</entry>
              <entry>Yes</entry>
              <entry>The type of Xen device</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-bluetooth_hci">
      <title>bluetooth_hci namespace</title>
      <para>
	Device objects representing a Bluetooth Host Controller Interface.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>bluetooth_hci.address</literal> (uint64)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Address of the host controller interface.</entry>
            </row>
            <row>
              <entry><literal>bluetooth_hci.originating_device</literal> (string)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The UDI of the physical device (e.g. an USB interface) that provides the HCI hardware.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-bluetooth_acl">
      <title>bluetooth_acl namespace</title>
      <para>
	Device objects representing Asynchronous Connection-oriented Links.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>bluetooth_acl.address</literal> (uint64)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Address of the device at the other end of the connection.</entry>
            </row>
            <row>
              <entry><literal>bluetooth_acl.originating_device</literal> (string)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The UDI of the Bluetooth HCI (of
              capability <literal>bluetooth_hci</literal>) that the
              connection is made through.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-bluetooth_sco">
      <title>bluetooth_sco namespace</title>
      <para>
	Device objects representing Synchronous Connection-Oriented links.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>bluetooth_sco.address</literal> (uint64)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Address of the device at the other end of the connection.</entry>
            </row>
            <row>
              <entry><literal>bluetooth_sco.originating_device</literal> (string)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The UDI of the Bluetooth HCI (of
              capability <literal>bluetooth_hci</literal>) that the
              connection is made through.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-drm">
      <title>drm namespace</title>
      <para>
	The <literal>drm</literal> namespace is present for Direct Rendering Manager device objects.
	They represent a Direct Rendering Interface.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>drm.dri_library</literal> (string)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Name of the dri (Direct Rendering Interface) library (e.g. i915).</entry>
            </row>
            <row>
              <entry><literal>drm.version</literal> (string)</entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The drm version (of the kernel module/diver).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ps3_system_bus">
      <title>
        ps3_system_bus namespace
      </title>
      <para>
        Devices on the PlayStation 3 system bus are represented by device
        objects where <literal>info.subsystem</literal> equals
        <literal>ps3_system_bus</literal>. The following properties are
        available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ps3_system_bus.id</literal> (string)
              </entry>
              <entry>example: serial</entry>
              <entry>Yes</entry>
              <entry>Device identification</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-virtio">
      <title>
        virtio namespace
      </title>
      <para>
        Devices on the VirtIO bus are represented by device
        objects where <literal>info.subsystem</literal> equals
        <literal>virtio</literal>. The following properties are
        available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>virtio.id</literal> (string)
              </entry>
              <entry>example: serial</entry>
              <entry>Yes</entry>
              <entry>Device identification</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-vio">
      <title>
        virtio namespace
      </title>
      <para>
        Devices on the IBM pSeries/iSeries 'vio' bus are represented
        by device objects where <literal>info.subsystem</literal>
        equals <literal>vio</literal>. The following properties are
        available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>vio.id</literal> (string)
              </entry>
              <entry>example: 1,10,3d</entry>
              <entry>Yes</entry>
              <entry>Device identification</entry>
            </row>
            <row>
              <entry>
                <literal>vio.type</literal> (string)
              </entry>
              <entry>example: viodasd, v-scsi, l-lan</entry>
              <entry>Yes</entry>
              <entry>Device type.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-vmbus">
      <title>
        vmbus namespace
      </title>
      <para>
	Virtual devices of the VMBus, which is part of the Hyper-V technologies 
	(which is a hypervisor based virtualization solution) included in the 
	Windows Server 2008, are represented by device objects where 
	<literal>info.subsystem</literal> equals <literal>vmbus</literal>. 
	The following properties are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>vmbus.bus_id</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>ID of the bus.</entry>
            </row>
            <row>
              <entry>
                <literal>vmbus.device_id</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>ID of the device.</entry>
            </row>
            <row>
              <entry>
                <literal>vmbus.class_id</literal> (string)
              </entry>
              <entry>example: {f8615163-df3e-46c5-913ff2d2f965ed0e}</entry>
              <entry>Yes</entry>
              <entry>Class identifier of the device.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>


  </sect1>

  <sect1 id="properties-functional">
    <title>Functional Properties</title>
    <para>
      The section describe functional properties of device objects,
      that is, properties that are merged onto device objects
      representing addressable hardware. In most
      circumstances such properties stem from a kernel level
      driver attached to the device represented by the device object,
      however, as HAL can merge properties from anywhere, they
      may have been merged from device information files or callouts.
    </para>

    <sect2 id="device-properties-kernel">
      <title>
        system namespace
      </title>
      <para>
        This namespace is found on the toplevel "Computer" device,
        and represents information about the system and the currently
        running kernel.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>system.kernel.name</literal> (string)
              </entry>
              <entry>example: Linux</entry>
              <entry>No</entry>
              <entry>
                The name of the kernel, usually the equivalent of
                <literal>uname -s</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.kernel.version</literal> (string)
              </entry>
              <entry>example: 2.6.5-7.104-default</entry>
              <entry>No</entry>
              <entry>
                The version of the currently running kernel.  Usually
                the equivalent of <literal>uname -r</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.kernel.machine</literal> (string)
              </entry>
              <entry>example: i686</entry>
              <entry>No</entry>
              <entry>
                The "machine hardware name" of the currently running kernel.
                Usually the equivalent of <literal>uname -m</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.formfactor</literal> (string)
              </entry>
              <entry>example: laptop, desktop, server, unknown</entry>
              <entry>Yes</entry>
              <entry>
                The formfactor of the system. Usually the equivalent of
                <literal>system.chassis.type</literal> or set from information
                about ACPI/APM/PMU properties.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.hardware.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The name of the manufacturer of the machine.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.product</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The product name of the machine.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.hardware.version</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The version of the machine.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.hardware.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The serial number of the machine.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.hardware.uuid</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The unique ID of the machine.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.hardware.primary_video.vendor</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The PCI vendor ID of the primary graphics card in the system.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.hardware.primary_video.product</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The PCI device ID of the primary graphics card in the system.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.firmware.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The firmware vendor.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.firmware.version</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The firmware version.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.firmware.release_date</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The release date of the firmware.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.chassis.manufacturer</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The manufacturer of the chassis.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.chassis.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The chassis type of the machine.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="device-properties-volume">
      <title>
        volume namespace
      </title>
      <para>
        This namespace is for device objects that represent storage
        devices with a filesystem that can be mounted. Such device
        objects will have the capability <literal>volume</literal> and
        they will export the properties below. Note that device
        objects can only have the <literal>volume</literal> capability
        if they already have the capability <literal>block</literal>
        and the property <literal>block.is_volume</literal> set to TRUE.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>volume.ignore</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This is a hint to software higher in the stack
                that this volume should be ignored. If TRUE, the volume
                should be invisible in the UI and mount wrappers should
                refuse to mount it on behalf on an unprivileged
                user. This is useful for hiding e.g. firmware partitions
                (e.g. bootstrap on Mac's) and OS reinstall partitions on
                e.g. OEM systems.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_mounted</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property is TRUE if and only if the volume is mounted</entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_mounted_read_only</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property is TRUE if and only if the volume is mounted and
                the volume's file-system is read-only.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>example: /media/compact_flash1  </entry>
              <entry>Yes (is blank only when volume.is_mounted is FALSE)</entry>
              <entry>A fully qualified path to the mount point of the volume</entry>
            </row>
            <row>
              <entry>
                <literal>volume.fsusage</literal> (string)
              </entry>
              <entry>example: filesystem</entry>
              <entry>Yes</entry>
              <entry>
                This property specifies the expected usage of the volume
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>filesystem</entry>
              <entry></entry>
              <entry>The volume is a mountable filesystem</entry>
            </row>
            <row>
              <entry></entry>
              <entry>partitiontable</entry>
              <entry></entry>
              <entry>
	        The volume contains a partitiontable.
	      </entry>
            </row>
            <row>
              <entry></entry>
              <entry>raid</entry>
              <entry></entry>
              <entry>The volume is a member of a raid set and not mountable</entry>
            </row>
            <row>
              <entry></entry>
              <entry>other</entry>
              <entry></entry>
              <entry>The volume is not mountable like a swap partition</entry>
            </row>
            <row>
              <entry></entry>
              <entry>unused</entry>
              <entry></entry>
              <entry>The volume is marked a unused or free</entry>
            </row>
            <row>
              <entry>
                <literal>volume.fstype</literal> (string)
              </entry>
              <entry>examples: ext3, vfat</entry>
              <entry>Yes (is blank if the type is unknown)</entry>
              <entry>The specific type of either the file system or what the volume is used for, cf. volume.fsusage</entry>
            </row>
            <row>
              <entry>
                <literal>volume.fsversion</literal> (string)
              </entry>
              <entry>example: FAT32</entry>
              <entry></entry>
              <entry>Version number or subtype of the filesystem</entry>
            </row>
            <row>
              <entry>
                <literal>volume.label</literal> (string)
              </entry>
              <entry>example: 'Fedora Core 1.90' </entry>
              <entry>Yes (is blank if no label is found)</entry>
              <entry>The label of the volume</entry>
            </row>
            <row>
              <entry>
                <literal>volume.uuid</literal> (string)
              </entry>
              <entry>example: 4060-6C11</entry>
              <entry>Yes (is blank if no UUID is found)</entry>
              <entry>The Universal Unique Identifer for the volume</entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_disc</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>If the volume stems from an optical disc, this
                property is true and the device object will also have
                the capability <literal>volume.disc</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.block_size</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The block size of the volume
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.num_blocks</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Number of blocks on the volume
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.size</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Size of the volume in bytes
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_partition</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                If the volume stems from a partition on e.g. a hard
                disk, this property is set to <literal>TRUE</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.linux.is_device_mapper</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes, but only on Linux</entry>
              <entry>
                If the volume stems from the Linux Device Mapper this property is set to <literal>TRUE</literal>.
              </entry>
            </row>

            <row>
              <entry>
                <literal>volume.partition.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                The number of the partition.
              </entry>
            </row>


            <row>
              <entry>
                <literal>volume.partition.label</literal> (string)
              </entry>
              <entry></entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
	        Label of partition. Only available for "apm" and "gpt"
		partition tables. Note that this is not the same as the
		file system label defined in <literal>volume.label</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.partition.uuid</literal> (string)
              </entry>
              <entry></entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                The UUID or GUID of the partition table entry. Only available for
		"gpt" partition tables.
              </entry>
            </row>

            <row>
              <entry>
                <literal>volume.partition.scheme</literal> (string)
              </entry>
              <entry></entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                The scheme of the partition table this entry is part of.
		Note that this is not necessarily the same as 
		<literal>storage.partitioning_scheme</literal> as 
		some partition tables can embed other partition tables.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>mbr</entry>
              <entry></entry>
              <entry>
                Master Boot Record
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>embr</entry>
              <entry></entry>
              <entry>
                Extended Master Boot Record
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>gpt</entry>
              <entry></entry>
              <entry>
                GUID Partition Table as defined by EFI
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>apm</entry>
              <entry></entry>
              <entry>
                Apple Partition Map
              </entry>
            </row>

            <row>
              <entry>
                <literal>volume.partition.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                The type of the partition table entry. Depends on 
		<literal>volume.partition.scheme</literal>.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry><literal>mbr</literal> and <literal>embr</literal> entries</entry>
              <entry></entry>
              <entry>
	        The hexadecimal encoding of the 8-bit partition type, see 
		http://www.win.tue.nl/~aeb/partitions/partition_types-1.html
		for a list. For example the Linux partition type is represented
		as the string "0x83".
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry><literal>gpt</literal> entries</entry>
              <entry></entry>
              <entry>
	        The GUID encoded as a string. See http://en.wikipedia.org/wiki/GUID_Partition_Table
		for a list of well-known GUID's.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry><literal>apm</literal> entries</entry>
              <entry></entry>
              <entry>
	        Defined in http://developer.apple.com/documentation/mac/Devices/Devices-126.html.
		Also note that for FAT file systems, it appears that "DOS_FAT_32", "DOS_FAT_16" 
		and "DOS_FAT_12" are also recognized under Mac OS X (I've tested this too) cf. 
		http://lists.apple.com/archives/Darwin-drivers/2003/May/msg00021.html
              </entry>
            </row>

            <row>
              <entry>
                <literal>volume.partition.flags</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
	        Flags conveying specific information about the partition
		entry. Dependent on the partitioning scheme.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry><literal>mbr</literal> and <literal>embr</literal> entries</entry>
              <entry></entry>
              <entry>
	        Only one flag, "boot", is defined. This is used by some BIOS'es and
		boot loaders to populate a boot menu. It means that a partition is
		bootable.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry><literal>gpt</literal> entries</entry>
              <entry></entry>
              <entry>
	        Only the flag "required" is recognized. This corresponds to
		bit 0 of the attibutes (at offset 48), meaning 
		"Required for the platform to function. The system cannot 
		function normally if this partition is removed. This
		partition should be considered as part of the hardware of the
		system, and if it is removed the system may not boot. It may
		contain diagnostics, recovery tools, or other code or data that is
		critical to the functioning of a system independent of any OS."
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry><literal>apm</literal> entries</entry>
              <entry></entry>
              <entry>
	        The following flags are recognized: 
		"allocated" if the partition is already allocated; and
		"in_use" if the partition is in use; may be cleared after a system reset; and
		"boot" if partition contains valid boot information; and
		"allow_read" if partition allows reading; and
		"allow_write"; if partition allows writing; and
		"boot_code_is_pic"; if boot code is position independent
              </entry>
            </row>

            <row>
              <entry>
                <literal>volume.partition.media_size</literal> (uint64)
              </entry>
              <entry>example: 500107862016</entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                If available, size of the current media or the fixed disk in the storage device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.partition.start</literal> (uint64)
              </entry>
              <entry>example: 32256</entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                If available, the offset where the partition starts on the media or the fixed disk in the storage device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Device objects with this capability may emit the following
        device conditions
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Condition Name</entry>
              <entry>Parameters</entry>
              <entry>Example</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>VolumeMount</literal>
              </entry>
              <entry>
                <literal>block.device</literal> (string),
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>
                <literal>/dev/sda1</literal>,
                <literal>/media/compact_flash</literal>
              </entry>
              <entry>Emitted when a volume is mounted</entry>
            </row>
            <row>
              <entry>
                <literal>VolumeUnmount</literal>
              </entry>
              <entry>
                <literal>block.device</literal> (string),
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>
                <literal>/dev/sda1</literal>,
                <literal>/media/compact_flash</literal>
              </entry>
              <entry>Emitted when a volume is unmounted</entry>
            </row>
            <row>
              <entry>
                <literal>VolumeUnmountForced</literal>
              </entry>
              <entry>
                <literal>block.device</literal> (string),
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>
                <literal>/dev/sda1</literal>,
                <literal>/media/compact_flash</literal>
              </entry>
              <entry>
                Emitted when a volume is forcibly unmounted because
                the media backing the volume was removed.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-volume-disc">
      <title>
        volume.disc namespace
      </title>
      <para>
        This namespace is for device objects that represent optical
        discs, e.g. device objects with the capability
        <literal>volume.disc</literal>. Such device objects will
        also have the capability <literal>volume</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>volume.disc.has_audio</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc contains audio</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.has_data</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc contains data</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_vcd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is a Video CD</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_svcd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is a Super Video CD</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_videodvd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is a Video DVD</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_appendable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if it's possible to write additional data</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_blank</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is blank</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_rewritable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is rewritable</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.capacity</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Capacity of disc, in bytes</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property specifies the physical type of the disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cd_rom</entry>
              <entry></entry>
              <entry>CD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cd_r</entry>
              <entry></entry>
              <entry>CD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cd_rw</entry>
              <entry></entry>
              <entry>CD-RW disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_rom</entry>
              <entry></entry>
              <entry>DVD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_ram</entry>
              <entry></entry>
              <entry>DVD-RAM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_r</entry>
              <entry></entry>
              <entry>DVD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_rw</entry>
              <entry></entry>
              <entry>DVD-RW disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_plus_r</entry>
              <entry></entry>
              <entry>DVD+R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_plus_rw</entry>
              <entry></entry>
              <entry>DVD+RW disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>bd_rom</entry>
              <entry></entry>
              <entry>BD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>bd_r</entry>
              <entry></entry>
              <entry>BD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>bd_re</entry>
              <entry></entry>
              <entry>BD-RE disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>hddvd_rom</entry>
              <entry></entry>
              <entry>HD DVD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>hddvd_r</entry>
              <entry></entry>
              <entry>HD DVD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>hddvd_rw</entry>
              <entry></entry>
              <entry>HD DVD-Rewritable disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>unknown</entry>
              <entry></entry>
              <entry>Unknown type or lack of support from drive to determine the type</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-storage">
      <title>
        storage namespace
      </title>
      <para>
        This namespace is used to describe storage devices
        and their capabilities. Such device objects will have the
        capability <literal>storage</literal> and
        they will export the properties below. Note that device
        objects can only have the <literal>storage</literal> capability
        if they already got capability <literal>block</literal> and the
        property <literal>block.is_volume</literal> set to FALSE.
        One significant between the <literal>storage</literal> and
        <literal>block</literal> namespace is that the properties
        exported in the <literal>storage</literal> represents
        constant vital product information, whereas the properties
        in the <literal>block</literal> namespace represent
        variable system-dependent information.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>storage.bus</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Interface the storage device is attached to</entry>
            </row>
            <row>
              <entry></entry>
              <entry>ide</entry>
              <entry></entry>
              <entry>IDE or ATA interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>usb</entry>
              <entry></entry>
              <entry>USB interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>ieee1394</entry>
              <entry></entry>
              <entry>IEEE 1394 interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>scsi</entry>
              <entry></entry>
              <entry>SCSI interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>sata</entry>
              <entry></entry>
              <entry>SATA interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>pcmcia</entry>
              <entry></entry>
              <entry>PCMCIA interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>mmc</entry>
              <entry></entry>
              <entry>MultiMediaCard (MMC) interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>ccw</entry>
              <entry></entry>
              <entry>IBM s390/s390x ccw interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>vio</entry>
              <entry></entry>
              <entry>IBM pSeries/iSeries Vio interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>platform</entry>
              <entry></entry>
              <entry>Legacy device that is part of the platform</entry>
            </row>
            <row>
              <entry></entry>
              <entry>linux_raid</entry>
              <entry></entry>
              <entry>Linux MD (multi disk) RAID device</entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>storage.drive_type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The type of the drive. Note that it may not be
                possible to probe for some of these properties so in
                some cases memory card readers may appear as
                harddisks. Device information files can be used to
                override this value.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>disk</entry>
              <entry></entry>
              <entry>The device is a harddisk</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cdrom</entry>
              <entry></entry>
              <entry>
                The device is an optical drive. The device object will also have the capability <literal>storage.cdrom</literal> in this case.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>floppy</entry>
              <entry></entry>
              <entry>The device is a floppy disk drive</entry>
            </row>
            <row>
              <entry></entry>
              <entry>tape</entry>
              <entry></entry>
              <entry>The device is a tape drive</entry>
            </row>
            <row>
              <entry></entry>
              <entry>compact_flash</entry>
              <entry></entry>
              <entry>The device is a card reader for Compact Flash memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry>memory_stick</entry>
              <entry></entry>
              <entry>The device is a card reader for MemoryStick memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry>smart_media</entry>
              <entry></entry>
              <entry>The device is a card reader for SmartMedia memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry>sd_mmc</entry>
              <entry></entry>
              <entry>The device is a card reader for SecureDigital/MultiMediaCard memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
            <row>
              <entry>
	        <literal>storage.removable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Media can be removed from the storage device</entry>
            </row>
            <row>
              <entry>
	        <literal>storage.removable.media_available</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>true, if and only if, media have been detected in storage device</entry>
            </row>
            <row>
              <entry>
	        <literal>storage.removable.media_size</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Size of media in storage device. Available only if media have been detected in storage device.</entry>
            </row>
            <row>
              <entry>
	        <literal>storage.removable.support_async_notification</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Whether the drive reports asynchronous notification for media change.</entry>
            </row>
            <row>
              <entry>
	        <literal>storage.partitioning_scheme</literal> (string)
              </entry>
              <entry></entry>
              <entry>Only when media is inserted and is partitioned</entry>
              <entry>The partitioning scheme of the media.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>mbr</entry>
              <entry></entry>
              <entry>Master Boot Record partitioning scheme used in most PC's</entry>
            </row>
            <row>
              <entry></entry>
              <entry>gpt</entry>
              <entry></entry>
              <entry>GUID Partitioning Table as defined by UEFI</entry>
            </row>
            <row>
              <entry></entry>
              <entry>apm</entry>
              <entry></entry>
              <entry>Apple Partition Map, used in non-Intel Apple computers</entry>
            </row>
            <row>
              <entry>
	        <literal>storage.size</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>size in bytes of the storage device - only meaningful if storage.removable is FALSE</entry>
            </row>
            <row>
              <entry>
                <literal>storage.requires_eject</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The eject ioctl is required to properly eject the media</entry>
            </row>
            <row>
              <entry>
                <literal>storage.hotpluggable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The storage device can be removed while the system is running</entry>
            </row>
            <row>
              <entry>
                <literal>storage.media_check_enabled</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>If this property is set to FALSE then HAL will not continuosly poll for media changes. </entry>
            </row>
            <row>
              <entry>
                <literal>storage.automount_enabled_hint</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property is a hint to desktop file managers that they shouldn't automount volumes of the storage device when they appear.</entry>
            </row>
            <row>
              <entry>
                <literal>storage.no_partitions_hint</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This property is a hint to programs that maintain the
                <literal>/etc/fstab</literal> file to signal, when
                TRUE, that the storage drive (such as floppy or
                optical drives) is used for media with no partition
                table so an entry can be added ahead of media
                insertion time. Note that this is only a hint; media
                may be inserted that has partition tables that the
                kernel may respect. Conversely, when this is FALSE
                media without partition tables may be inserted (an
                example is a Compact Flash card; this media is normally
                formatted with a PC style partition table and a single
                FAT partition. However, it may be formatted with just
                a single FAT partition and no partition table).
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.originating_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This contains the UDI of the device object
                representing the device or blank if
                there is no such device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.model</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The name of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The vendor of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>The serial number of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.firmware_revision</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>The revision of the firmware of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.icon.drive</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Name of icon to use for displaying the drive. The name
                must comply with freedesktop.org icon-theme specification
                and must not be an absolute path.
                This property exists such that e.g. OEM's can install
                icons in <literal>/usr/share/icons/hicolor</literal>
                a device information file matching their device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.icon.volume</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Name of icon to use for displaying volumes from the drive.
                The name must comply with freedesktop.org icon-theme
                specification and must not be an absolute path.
                This property exists such that e.g. OEM's can install
                icons in <literal>/usr/share/icons/hicolor</literal>
                a device information file matching their device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-storage-cdrom">
      <title>
        storage.cdrom namespace
      </title>
      <para>
        This namespace is used to describe optical storage drives
        and their capabilities.Such device objects will have the
        capability <literal>storage.cdrom</literal> and
        they will export the properties below. Note that device
        objects can only have the <literal>storage.cdrom</literal> capability
        if they already got the capability <literal>storage</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>storage.cdrom.cdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write CD-R discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.cdrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to CD-RW discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can read DVD-ROM discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD-R discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to DVD-RW discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdram</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD-RAM discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD+R discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to DVD+RW discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusrwdl</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to DVD+RW Dual-Layer discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusrdl</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD+R Dual-Layer discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.bd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can read Blu-ray ROM discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.bdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Blu-ray Recordable discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.bdre</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Blu-ray Rewritable discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.hddvd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can read Read-only HD DVD discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.hddvdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Write-once HD DVD discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.hddvdrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Rewritable HD DVD discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.mrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can read MRW (Mount Rainier Rewrite) discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.mrw_w</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write MRW (Mount Rainier Rewrite) discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.mo</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>TRUE when the optical drive is a MO (Magneto Optical) device.</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.support_multisession</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE if the drive can read multisession discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.support_media_changed</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE if the drive can generate media changed events</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.read_speed</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The maximum reading speed, in kb/s</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.write_speed</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The maximum writing speed, in kb/s</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.write_speeds</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>By the device supported write speeds in kb/s</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-storage-linux-raid">
      <title>
        storage.linux_raid namespace
      </title>
      <para>
        This namespace is used to describe logical Software RAID
        devices under Linux using the <literal>md</literal> driver. By
        and large, all the same properties under
        the <literal>storage</literal> name space applies except
        that <literal>storage.serial</literal> is set to the UUID of
        the RAID set, <literal>storage.firmware_version</literal> is
        set to the version of the <literal>md</literal> driver and the
        value of <literal>storage.hotpluggable</literal> is taken from
        the enclosing drive of the first RAID component
        encountered. In addition, the following properties are
        available.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>storage.linux_raid.level</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>the RAID level of the device as reported by the kernel (linear, raid0, raid1, raid4, raid5, raid6, raid10)</entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.sysfs_path</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>sysfs path of device, e.g. /sys/block/md0</entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.num_components</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Number of components in the RAID array</entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.num_components_active</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Number of active components in the RAID array. If less
                than <literal>storage.linux_raid.num_components</literal>
                it means that the RAID array is running in degraded
                mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.components</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>UDI's of the volumes constituting the array.</entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.is_syncing</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE if, and only if, the array is currently syncing</entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.sync.action</literal> (string)
              </entry>
              <entry></entry>
              <entry>only if <literal>.is_syncing</literal> is TRUE</entry>
              <entry>The syncing mechanism as reported by the kernel (idle, resync, check, repair, recover)</entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.sync.progress</literal> (double)
              </entry>
              <entry></entry>
              <entry>only if <literal>.is_syncing</literal> is TRUE</entry>
              <entry>Number between 0 and 1 representing progress of the sync operation. This is updated regulary when syncing is happening.</entry>
            </row>
            <row>
              <entry>
                <literal>storage.linux_raid.sync.speed</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>only if <literal>.is_syncing</literal> is TRUE</entry>
              <entry>Speed of the sync operation, in kB/s. This is updated regulary when syncing is happening.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-net">
      <title>
        net namespace
      </title>
      <para>
        This namespace is used to describe networking devices and
        their capabilities.Such device objects will have the
        capability <literal>net</literal> and they will export the
        properties below. This namespace only describe the generic
        aspect of networking devices; specific networking technologies
        such as IEEE 802.3, IEEE 802.11 and Bluetooth have separate
	namespaces.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.address</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Hardware address as a string. Is hardware dependant</entry>
            </row>
            <row>
              <entry>
                <literal>net.arp_proto_hw_id</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>ARP protocol hardware identifier</entry>
            </row>
            <row>
              <entry>
                <literal>net.interface</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Name of the interface; may change if an interface is
                renamed
              </entry>
            </row>
            <row>
              <entry>
                <literal>net.interface_up</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Whether the interface is up</entry>
            </row>
            <row>
              <entry>
                <literal>net.linux.ifindex</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes (only on Linux)</entry>
              <entry>Index of the interface</entry>
            </row>
            <row>
              <entry>
                <literal>net.originating_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>UDI of the device the network device is bound to.</entry>
            </row>
            <row>
              <entry>
                <literal>net.media</literal> (string)
              </entry>
              <entry>example: Ethernet</entry>
              <entry>Yes</entry>
              <entry>Textual description of the networking media</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-net-80203">
      <title>
        net.80203 namespace
      </title>
      <para>
        Ethernet networking devices is described in this namespace
        for device objects with the capability
        <literal>net.80203</literal>.
        Note that device
        objects can only have the <literal>net.80203</literal> capability
        if they already have the capability <literal>net</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.80203.link</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only if the <literal>net.80203</literal> capability is set
                and <literal>net.interface_up</literal> is
                <literal>TRUE</literal>.
              </entry>
              <entry>True if the ethernet adaptor is connected to a
                another transceiver. NOTE: property not implemented yet.
              </entry>
            </row>
            <row>
              <entry>
                <literal>net.80203.rate</literal> (uint64)
              </entry>
              <entry>example: 100000000</entry>
              <entry>
                Only if the <literal>net.80203</literal> capability is set
                and <literal>net.80203.link</literal> is
                <literal>TRUE</literal>.
              </entry>
              <entry>Bandwidth of connection, in bits/s. NOTE: property not
                implemented yet.
              </entry>
            </row>
            <row>
              <entry>
                <literal>net.80203.mac_address</literal> (uint64)
              </entry>
              <entry>example: 0x0010605d8ef4</entry>
              <entry>
                Only if the <literal>net.80203</literal> is set
              </entry>
              <entry>48-bit address</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-net-80211">
      <title>
        net.80211 namespace
      </title>
      <para>
        Wireless ethernet networking devices is described in this namespace
        for device objects with the capability
        <literal>net.80211</literal>.
        Note that device
        objects can only have the <literal>net.80211</literal> capability
        if they already have the capability <literal>net</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.80211.mac_address</literal> (uint64)
              </entry>
              <entry>example: 0x0010605d8ef4</entry>
              <entry>
                Only if the <literal>net.80211</literal> capability is set
              </entry>
              <entry>48-bit address</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-net-bridge">
      <title>
        net.bridge namespace
      </title>
      <para>
        Bridge ethernet networking devices is described in this namespace
        for device objects with the capability
        <literal>net.bridge</literal>.
        Note that device
        objects can only have the <literal>net.bridge</literal> capability
        if they already have the capability <literal>net</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.bridge.mac_address</literal> (uint64)
              </entry>
              <entry>example: 0x0010605d8ef4</entry>
              <entry>
                Only if the <literal>net.bridge</literal> capability is set
              </entry>
              <entry>48-bit address</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-net-bluetooth">
      <title>
        net.bluetooth namespace
      </title>
      <para>
        Bluetooth ethernet networking devices is described in this namespace
        for device objects with the capability
        <literal>net.bluetooth</literal>.
        Note that device
        objects can only have the <literal>net.bluetooth</literal> capability
        if they already have the capability <literal>net</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.bluetooth.mac_address</literal> (uint64)
              </entry>
              <entry>example: 0x0010605d8ef4</entry>
              <entry>
                Only if the <literal>net.bluetooth</literal> capability is set
              </entry>
              <entry>48-bit address</entry>
            </row>
           <row>
              <entry>
                <literal>net.bluetooth.name</literal> (string)
              </entry>
              <entry>example: Network Access Point Service</entry>
              <entry>
                Only if the <literal>net.bluetooth</literal> capability is set and Bluez is being used.
              </entry>
              <entry>Displayable Name for network connection</entry>
            </row>
            <row>
              <entry>
                <literal>net.bluetooth.uuid</literal> (string)
              </entry>
              <entry>example: 00001116-0000-1000-8000-00805f9b34fb</entry>
              <entry>
                Only if the <literal>net.bluetooth</literal> capability is set and Bluez is being used.
              </entry>
              <entry>Universal Unique Identifier for network connection</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-net-irda">
      <title>
        net.irda namespace
      </title>
      <para>
        IrDA (Infrared Data Association) Networking devices are described in 
	this namespace for device objects with the capability
        <literal>net.irda</literal>.
        Note that device objects can only have the <literal>net.irda</literal> 
	capability if they already have the capability <literal>net</literal>.
      </para>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-net-80211control">
      <title>
        net.80211control namespace
      </title>
      <para>
        Control devices for Wireless ethernet networking devices are described in 
	this namespace for device objects with the capability
        <literal>net.80211control</literal>.
        Note that device objects can only have the <literal>net.80211control</literal> 
	capability if they already have the capability <literal>net</literal>.
	Warning: You should know what you do if you touch this devices. They are 
	not always stable and can cause (kernel) crashes (on linux).
      </para>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-input">
      <title>
        input namespace
      </title>
      <para>
        This namespace is concerned with human input devices such as
        keyboards, mice, pointing devices and game controllers. If a
        device object has the capability <literal>input</literal> then
        the following properties are available
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>input.device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Special device file for recieving input events</entry>
            </row>
            <row>
              <entry>
                <literal>input.x11_driver</literal> (string)
              </entry>
              <entry>e.g. "evdev"</entry>
              <entry>No</entry>
              <entry>X11 input driver to use</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-input-keys">
      <title>
        input.keys namespace
      </title>
      <para>
        The input device have keys that can be pressed. No namespace
        specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-input-keypad">
      <title>
        input.keypad namespace
      </title>
      <para>
        The input device have keypad keys. No namespace
        specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-input-keyboard">
      <title>
        input.keyboard namespace
      </title>
      <para>
        The input device is a normal keyboard. No namespace specific
        properties.
      </para>
    </sect2>
    <sect2 id="device-properties-input-mouse">
      <title>
        input.mouse namespace
      </title>
      <para>
        The input device is a mouse. No namespace specific
        properties.
      </para>
    </sect2>
    <sect2 id="device-properties-input-switch">
      <title>
        input.switch namespace
      </title>
      <para>
        The input device is a switch, e.g. it has buttons with
        state. No namespace specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-input-joystick">
      <title>
        input.joystick namespace
      </title>
      <para>
        The input device is a joystick. No namespace specific
        properties.
      </para>
    </sect2>
    <sect2 id="device-properties-input-tablet">
      <title>
        input.tablet namespace
      </title>
      <para>
        The input device is a tablet. No namespace specific
        properties.
      </para>
    </sect2>
    <sect2 id="device-properties-input-keymap">
      <title>
        input.keymap namespace
      </title>
      <para>
        Device objects with the capability <literal>input.keymap</literal>
        provide facilities to remap keyboard buttons.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>input.keymap.data</literal> (strlist)
              </entry>
              <entry>e.g. "e017:brightnessup"</entry>
              <entry>No</entry>
              <entry>
                The scancode is represented in hex and the keycode name as
                as string. The keycode name is not case sensitive.
                On Linux, the keycode name should be the same constant as
                present in /usr/include/linux/input.h with the 'KEY_'
                prefix removed, e.g. 'KEY_SLEEP' -> 'sleep'.
                You can append as many <literal>input.keymap.data</literal>
                values as there are keys to remap.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-input-xkb">
      <title>
        input.xkb namespace
      </title>
      <para>
        Device objects with the capability <literal>input.keys</literal>
        can provide information about their physical layout.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>input.xkb.rules</literal> (string)
              </entry>
              <entry>e.g. "base"</entry>
              <entry>Yes</entry>
              <entry>
                XKB rules file to use; 'base' is standard, but 'xorg'
                or 'xfree86' may be needed for backwards compatibility
                with very old versions of XKB data.
              </entry>
            </row>
            <row>
              <entry>
                <literal>input.xkb.model</literal> (string)
              </entry>
              <entry>e.g. "logicdp"</entry>
              <entry>Yes</entry>
              <entry>
                Physical keyboard model (e.g. Logitech Cordless Freedom
                Pro), as given to XKB.
              </entry>
            </row>
            <row>
              <entry>
                <literal>input.xkb.layout</literal> (string)
              </entry>
              <entry>e.g. "us"</entry>
              <entry>Yes</entry>
              <entry>
                Keyboard layout (as engraved on the keys).
              </entry>
            </row>
            <row>
              <entry>
                <literal>input.xkb.variant</literal> (string)
              </entry>
              <entry>e.g. "nodeadkeys"</entry>
              <entry>No</entry>
              <entry>
                Variant of the XKB layout (if any) to use.
              </entry>
            </row>
            <row>
              <entry>
                <literal>input.xkb.options</literal> (strlist)
              </entry>
              <entry>e.g. "ctrl:nocaps"</entry>
              <entry>No</entry>
              <entry>
                Options to be provided to XKB.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-pcmcia_socket">
      <title>
        pcmcia_socket namespace
      </title>
      <para>
        Device objects with the capability <literal>pcmcia_socket</literal>
        represent bridge devices (the actual bus of the device may differ)
        that PCMCIA cards can be attached to. The following properties are
        available.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pcmcia_socket.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>PCMCIA socket number, starting from zero</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-printer">
      <title>
        printer namespace
      </title>
      <para>
        Device objects with the capability <literal>printer</literal>
        represent printers. The following properties are available.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>printer.device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.product</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.description</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.commandset</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>List of supported commands / printer languages.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-portable_audio_player">
      <title>
        portable_audio_player namespace
      </title>
      <para>
        Device objects with the capability
        <literal>portable_audio_player</literal> represent portable
        audio players that can be attached to a computer to exchange
        files. They can also playback audio. Sometimes they can also
        record audio. This capability can't, in general, be reliably
        probed from the hardware so the information needs to be merged
        from either device information files or callouts. Therefore
        this capability should be merged on the appropriate device
        object that represents the addressable piece of hardware that
        is the portable music player; for USB devices this would be
        the device object representing the appropriate USB
        interface. The following properties are available:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>portable_audio_player.access_method.protocols</literal> (strlist)
              </entry>
              <entry>example: storage ipod mtp pde iriver karma</entry>
              <entry>Yes</entry>
              <entry>
                Indicates transfer protocols that this device can speak.
                <literal>storage</literal> indicates USB Mass Storage (UMS) is an access
                protocol.  <literal>ipod</literal> indicates UMS plus an iTunes-style database.
                <literal>mtp</literal> indicates a device using Microsoft's Media Transfer Protocol.
                Arbitrary values for newer or obscure protocols are allowed but
                entities providing this information should try to ensure that
                they are not duplicating protocols under a different name.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.access_method.drivers</literal> (strlist)
              </entry>
              <entry>example: libgpod, libmtp, libnjb, libifp, libkarma</entry>
              <entry>No</entry>
              <entry>
                Indicates installed device driver libraries that can
                handle this device.  These drivers can export information
                in <literal>portable_audio_player.[drivername]</literal> sub-namespaces.
                Can also be used by libraries or programs providing extra device information
                to indicate the presence of this information in the appropriate sub-namespace.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.[drivername].protocol</literal> (strlist)
              </entry>
              <entry>example: mtp</entry>
              <entry>If portable_audio_player.drivers is set</entry>
              <entry>
                This entry is required for drivers listed in
                <literal>portable_audio_player.access_method.drivers</literal>. Indicates which
                protocol in <literal>portable_audio_player.access_method.protocols</literal>
                a particular driver will use.  If the driver is providing information only, this
                should be set to <literal>information</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.output_formats</literal> (strlist)
              </entry>
              <entry>example: audio/mpeg audio/x-ms-wma</entry>
              <entry>Yes</entry>
              <entry>
                A string list of MIME-types representing the kind of audio
                formats that the device can play back.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.input_formats</literal> (strlist)
              </entry>
              <entry>example: audio/x-wav</entry>
              <entry>Yes</entry>
              <entry>
                A string list of MIME-types representing the kind of audio
                formats that the device can record. If empty, it means that
                the device is not capable of recording.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.folder_depth </literal> (int)
              </entry>
              <entry>example: 1 (If the device only supports one sub-folder)</entry>
              <entry>No</entry>
              <entry>
                If portable_audio_player.access_method.protocols contains "storage",
                this tells applications exactly how deep of directory hierarchies
                files should be placed in.  If all files are put in a
                sub-folder (with the audio_folders property), only the depth within
                that sub-folder should be entered here. If the device does not have
                a limit, do not set this property.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.audio_folders</literal> (strlist)
              </entry>
              <entry>example: music/ voice/ linein/</entry>
              <entry>No</entry>
              <entry>
                If portable_audio_player.access_method.protocols contains "storage",
                this may contain a string list of folders in which music
                can be found.  Paths are relative to the mount point of the
                device. If there is one or more entry in this property, the
                first one is where files will be written to by applications.
                Do not enter a folder and a parent of that folder.
                If the device places files in its root directory, then do not
                set this property.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.playlist_format</literal> (strlist)
              </entry>
              <entry>example: audio/x-mpegurl audio/x-somethingelse</entry>
              <entry>No</entry>
              <entry>
                A string list of the MIME-type of the playlist formats accepted by
                this device.  Leave blank if none.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.playlist_path</literal> (string)
              </entry>
              <entry>examples: playlists/%File or Playlist.m3u</entry>
              <entry>No</entry>
              <entry>
                Set to the path to which playlists should be written.  Leave
                blank if playlist files are not supported.  If the device supports a single playlist with a specific name/path,
                set this to the path relative to the mount point that it should be saved to.  If it supports multiple
                playlists, use the %File variable as needed.  Applications are responsible for substituting %File with the
                desired playlist file name, noting that it's use in this string is optional.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.storage_device</literal> (string)
              </entry>
              <entry>examples: a udi</entry>
              <entry>No</entry>
              <entry>
              	Set to the udi of the portable_audio_player device if portable_audio_player.access_method.protocols 
		contains storage for a USB Mass Storage (UMS) music player. Mandatory for storage.
	      </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-alsa">
      <title>
        alsa namespace
      </title>
      <para>
        Device objects with the capability <literal>alsa</literal>
        represent all the streams available through ALSA on a soundcard.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>alsa.card</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Card number in system as registered by ALSA.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.card_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>I82801DBICH4</literal>, <literal>MP3</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.device</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Device number assigned by ALSA for a current card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.device_file</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The device node to access the ALSA device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.device_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>Intel 82801DB-ICH4 MIC2 ADC</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the specific device for a card
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.pcm_class</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The PCM class of the device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>generic</entry>
              <entry></entry>
              <entry>
                A standard PCM sound device (SND_PCM_CLASS_GENERIC).
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>multi</entry>
              <entry></entry>
              <entry>
                A multichannel device PCM sound device (SND_PCM_CLASS_MULTI) which 
		e.g. contains a generic and a modem device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>digitizer</entry>
              <entry></entry>
              <entry>
                A PCM digitizer device (SND_PCM_CLASS_DIGITIZER).
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>modem</entry>
              <entry></entry>
              <entry>
                A PCM modem device (SND_PCM_CLASS_MODEM).
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>unknown</entry>
              <entry></entry>
              <entry>
                The value is 'unknown' if the kernel provide no information about the 
		PCM device class of the device (e.g. the file pcm_class is missing).
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>none</entry>
              <entry></entry>
              <entry>
                The value is 'none' if this there is no PCM class for this device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.originating_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                UDI of the device the ALSA device is bound to.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The type of the stream.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>control</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is control device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>capture</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is capture device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>midi</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is MIDI device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>playback</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is playback device.
              </entry>
            </row>
	    <row>
              <entry></entry>
              <entry>
                <literal>unknown</literal>
              </entry>
              <entry></entry>
              <entry>
                The type of the device is unknown.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>hw_specific</literal>
              </entry>
              <entry></entry>
              <entry>
                This is a hardware specific device (as e.g. from snd_fm801 for Fortemedia FM801 
		PCI Audio). The driver can use it freely for purposes that are not covered by 
		standard ALSA API. 
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>timer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is the global ALSA timer device.
                This means, the device is for all ALSA devices/cards.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>sequencer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is the global ALSA sequencer device.
                This means, the device is for all ALSA devices/cards.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>unknown</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is unknown device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-oss">
      <title>
        oss namespace
      </title>
      <para>
        Device objects with the capability <literal>oss</literal>
        represent all the streams available through OSS on a soundcard.
        OSS devices could be emulated by ALSA.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>oss.card</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Card number in system as registered by OSS (and/or ALSA).
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.card_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>I82801DBICH4</literal>, <literal>MP3</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.device</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Device number assigned by OSS/ALSA for a current card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.device_file</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The device node to access the OSS device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.device_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>Intel 82801DB-ICH4 MIC2 ADC</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the specific device for a card
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.originating_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                UDI of the device the OSS device is bound to.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The type of the stream.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>mixer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is control/mixer device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>pcm</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is PCM device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>midi</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is MIDI device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>sequencer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is a global OSS sequencer device.
                This means, the device is for all OSS devices/cards.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>unknown</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is unknown device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-camera">
      <title>
        camera namespace
      </title>
      <para>
        Device objects with the capability <literal>camera</literal>
        represent digital still cameras that can be attached to a
        computer to exchange files. This does not include card readers
        for memory cards used for cameras. This capability can't, in
        general, be reliably probed from the hardware so the
        information needs to be merged from either device information
        files or callouts. Therefore this capability should be merged
        on the appropriate device object that represents the
        addressable piece of hardware that is the digital still
        camera; for USB devices this would be the device object
        representing the appropriate USB interface. The following
        properties are available:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>camera.access_method</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property defines how the device is accessed </entry>
            </row>
            <row>
              <entry></entry>
              <entry>storage</entry>
              <entry></entry>
              <entry>
                The device is accessed as a Mass Storage device
                through a kernel driver.  Application Developers
                should descent down the device object tree to find the
                device object of capability
                <literal>storage</literal> in order to access the
                device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>user</entry>
              <entry></entry>
              <entry>
                The device is accessed from userspace through
                a userspace driver.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>camera.libgphoto2.support</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If true, the device is supported by a userspace driver
                from the libgphoto2 project.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-scanner">
      <title>
        scanner namespace
      </title>
      <para>
        Device objects with the capability <literal>scanner</literal>
        represent image scanners. This capability should be merged
        on the appropriate device object that represents the
        addressable piece of hardware that is the digital still
        camera; for USB devices this would be the device object
        representing the appropriate USB interface. The following
        properties are available:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>scanner.access_method</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property defines how the device is accessed </entry>
            </row>
            <row>
              <entry></entry>
              <entry>proprietary</entry>
              <entry></entry>
              <entry>
                The device is accessed from userspace through
                a userspace driver such as SANE.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-laptop-panel">
      <title>
        laptop_panel namespace
      </title>
      <para>
        Device objects with the capability <literal>laptop_panel</literal>
        represent devices capable of changing the brightness of the display.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>laptop_panel.num_levels</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The brightness levels supported by the adaptor.
              </entry>
            </row>
            <row>
              <entry>
                <literal>laptop_panel.access_method</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The access method to use in scripts, e.g. pmu, toshiba, ibm, sony.
              </entry>
            </row>
            <row>
              <entry>
                <literal>laptop_panel.brightness_in_hardware</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                On some laptops, the brightness control is all done in hardware
                but the hardware also synthesizes keypresses when the
                brightness is changed.
                If this key is set true, then any power manager software should
                not attempt to set any new values on brightness keypress, as it
                may cause the panel to flash uncontrollably.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following methods exist on the interface
        <literal>org.freedesktop.Hal.Device.LaptopPanel</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Method (parameter types)</entry>
              <entry>Parameters</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>SetBrightness</literal> (integer)
              </entry>
              <entry>
                The hardware brightness state, which should be between 0 and 
                <literal>laptop_panel.num_levels</literal> - 1.
              </entry>
              <entry>No</entry>
              <entry>
                This method adjusts the brightness on an laptop screen.
                The values are returned as hardware values rather than
                percentages as we cannot easily to floating point rounding in
                shell code and therefore use the raw values to prevent integer
                rounding errors.
              </entry>
            </row>
            <row>
              <entry>
                integer <literal>GetBrightness</literal> (void)
              </entry>
              <entry>
                Returns the hardware brightness state, which should be
                between 0 and <literal>laptop_panel.num_levels</literal> - 1.
              </entry>
              <entry>No</entry>
              <entry>
                This method gets the hardware brightness of the laptop screen,
                which we may need to do fairly regually on hardware that
                changes the values in hardware without a software event.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ac_adapter">
      <title>
        ac_adapter namespace
      </title>
      <para>
        Device objects with the capability <literal>ac_adapter</literal>
        represent all the devices capable of powering the system from AC power
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ac_adapter.present</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The state of the adapter, i.e. whether it is providing power to
                the unit from mains power.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-battery">
      <title>
        battery namespace
      </title>
      <para>
        Device objects with the capability <literal>battery</literal>
        represent all the devices having some battery (in many cases -
        rechargeable) inside.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>battery.present</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This is present as some smart batteries can have acpi/pmu
                entries, and be physically missing.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This property defines the type of the device holding the
                battery. This property is defined for the development
                simplicity - battery indicators can use it to find the
                proper iconic representation.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>pda</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a personal digital
                assistant, e.g. a device that looks like a handheld computer
                to do specific tasks such as keeping notes or containing
                a personal database
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>ups</literal>
              </entry>
              <entry></entry>
              <entry>
                A battery powered power supply that is
                guaranteed to provide power to a computer in the event of
                interruptions in the incoming electrical power. Most of the
                time this is an external device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>primary</literal>
              </entry>
              <entry></entry>
              <entry>
                The battery is a primary power source for the system - an
                example are laptop batteries.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>mouse</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a mouse.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>keyboard</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a keyboard.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>keyboard_mouse</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a combined mouse and keyboard.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>camera</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a camera.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>usb</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a generic usb device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>unknown</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is not covered by other types.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.unit</literal> (string)
              </entry>
              <entry>Examples:
                <literal>mWh</literal>,
                <literal>percent</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical unit used by the charge level properties
                (maximum and current). In many cases, this property is
                omitted - which indicates that the charge properties
                are measured in some unknown units.
                The units should never be mAh as this is not a measurement
                of charge.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The maximum level of charge the device was designed for.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.last_full</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The maximum level of charge the device could hold the last
                time it was full.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.current</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The current level of charge which the device can is holding.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.rate</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The discharge/charge rate measured
                in <literal>"battery.charge_level.unit"</literal>
                units per second.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.warning</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the charge level of the battery drops below this value its
                state changes to 'warning'.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.low</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the charge level of the battery drops below this value its
                state changes to 'low'.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.granularity_1</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Granularity value one of the battery measured
                in <literal>"battery.charge_level.unit"</literal>
                units .
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.granularity_2</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Granularity value two of the battery measured
                in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.unit</literal> (string)
              </entry>
              <entry>Examples:
                <literal>mWh</literal>,
                <literal>mAh</literal>,
                <literal>percent</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical unit used by the charge level properties
                (maximum and current) as reported by the hardware.
                In many cases, this property is omitted - which indicates
                that the charge properties are measured in some unknown units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The maximum level of charge the device was designed for,
                as reported by the hardware.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.last_full</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The maximum level of charge the device could hold the last
                time it was full, as reported by the hardware.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.current</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The current level of charge which the device is holding,
                as reported by the hardware.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.rate</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The discharge/charge rate as reported by the hardware measured
                in <literal>"battery.reporting.unit"</literal>
                units per second.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.warning</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the hardware charge level of the battery drops below
                this value its state changes to 'warning'.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.low</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the hardware charge level of the battery drops below
                this value its state changes to 'low'.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.granularity_1</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Hardware granularity value one of the battery measured
                in <literal>"battery.reporting.unit"</literal>
                units .
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.granularity_2</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Hardware granularity value two of the battery measured
                in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.capacity_state</literal> (string)
              </entry>
              <entry>
                Examples: <literal>ok</literal>, <literal>critical</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The capacity state of the battery.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.voltage.unit</literal> (string)
              </entry>
              <entry>
                Examples: <literal>mV</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical measurement unit used by the voltage properties
                (design and current).
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.voltage.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The voltage level for which the battery is designed for.
                Measured in <literal>"battery.voltage.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.voltage.current</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The voltage level currently emitted by the battery.
                Measured in <literal>"battery.voltage.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.alarm.unit</literal> (string)
              </entry>
              <entry>
                Examples: <literal>mWh</literal>, <literal>mAh</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical measurement unit used by the alarm property.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.alarm.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the charge level of the battery drops below this value
                its state changes to 'alarm'.
                Measured in <literal>"battery.alarm.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.remaining_time</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Remaining time, in seconds, that the battery can provide
                power (if discharging) or the time until charged (if charging).
                This is an estimate and may be imprecise.
                This key is not present for invalid data.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.remaining_time.calculate_per_time</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If this property is <literal>true</literal> the
                <literal>battery.remaining_time</literal> becomes guessed from
                <literal>battery.charge_level.current</literal> and time.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.percentage</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Charge, normalised to percent. This is useful if an application
                does not want to process the raw values and do all the extra
                checks on the result. This key is not present for invalid data.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.is_rechargeable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                True if the battery unit is rechargeable, false if its is
                one-time (disposable after one usage).
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.rechargeable.is_charging</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only if <literal>battery.is_rechargeable</literal> is TRUE
              </entry>
              <entry>
                TRUE if, and only if, the battery is charging.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.rechargeable.is_discharging</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only if <literal>battery.is_rechargeable</literal> is TRUE
              </entry>
              <entry>
                TRUE if, and only if, the battery is discharging.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.command_interface</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The abstract name allowing daemons and/or user-level apps
                to distinguish some groups of devices having similar
                programming  interface. Introduced mostly for the daemons'
                coding simplicity.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Vendor of the battery.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.model</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Make of the battery.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.technology</literal> (string)
              </entry>
              <entry>example: LION</entry>
              <entry>No</entry>
              <entry>
                The technology of the battery as reported by the hardware.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.technology</literal> (string)
              </entry>
              <entry>
                lead-acid, lithium-ion, lithium-polymer,
                nickel-metal-hydride, unknown
              </entry>
              <entry>No</entry>
              <entry>
                The technology of the battery processed to a few standard types.
                This key is needed as the hardware often does not specify the
                description text for a battery, and so we have to calculate it
                from the output of <literal>battery.reporting.technology</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                A string uniquely identifying the instance of the battery;
                it will be different for two (otherwise) identical batteries.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-button">
      <title>
        button namespace
      </title>
      <para>
        Device objects with the capability <literal>button</literal>
        represent the devices capable of providing a state to the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>button.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>The type of button</entry>
            </row>
            <row>
              <entry></entry>
              <entry>lid</entry>
              <entry></entry>
              <entry>
                The switch on a laptop that senses whether the lid is
                open or closed
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>power</entry>
              <entry></entry>
              <entry>The main power button on the computer.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>sleep</entry>
              <entry></entry>
              <entry>
                The sleep button on a computer capable of putting the computer
                into a suspend state
              </entry>
            </row>
            <row>
              <entry>
                <literal>button.has_state</literal> (bool)
              </entry>
              <entry></entry>
              <entry>no</entry>
              <entry>True if the button maintains state, e.g. can toggled on/off</entry>
            </row>
            <row>
              <entry>
                <literal>button.state.value</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only when <literal>button.has_state</literal> is
                TRUE
              </entry>
              <entry>State of the button, TRUE if it is enabled</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Device objects with this capability may emit the following events.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Condition Name</entry>
              <entry>Parameters</entry>
              <entry>Example</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ButtonPressed</literal>
              </entry>
              <entry>
                <literal>button.type (string)</literal>
              </entry>
              <entry>sleep</entry>
              <entry>Emitted when a button is pressed</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-processor">
      <title>
        processor namespace
      </title>
      <para>
        Device objects with the capability <literal>processor</literal>
        represent CPU's in the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>processor.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The internal processor number in the system, starting from zero
              </entry>
            </row>
            <row>
              <entry>
                <literal>processor.can_throttle</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Whether the processor supports throttling to decrease it's
                own clock speed
              </entry>
            </row>
            <row>
              <entry>
                <literal>processor.maximum_speed</literal> (long)
              </entry>
              <entry>example: 2200</entry>
              <entry>No</entry>
              <entry>The maximum speed of the processor in units of MHz</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-light-sensor">
      <title>
        light_sensor namespace
      </title>
      <para>
        Device objects with the capability <literal>sensor</literal>
        represent light sensors in the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>light_sensor.sensor_locations</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The locations of the sensors</entry>
            </row>
            <row>
              <entry>
                <literal>light_sensor.num_sensors</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Number of physical sensors</entry>
            </row>
            <row>
              <entry>
                <literal>light_sensor.num_levels</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The number of levels of the sensors</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-pda">
      <title>
        PDA namespace
      </title>
      <para>
        Device objects with the capability <literal>pda</literal>
        represent Personal Digital Assistant (PDA) devices.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pda.platform</literal> (string)
              </entry>
              <entry>e.g. palm or pocketpc</entry>
              <entry>Yes</entry>
              <entry>The type of the PDA platform</entry>
            </row>
            <row>
              <entry>
                <literal>pda.palm.hotsync_interface</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
		Path to the Palm hotsync interface e.g. a linux device file (e.g. USB) or a 
		serial device.
	      </entry>
            </row>
            <row>
              <entry>
                <literal>pda.pocketpc.hotsync_interface</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
		Path to the Pocket PC (e.g. HP iPAQ) hotsync interface e.g. a linux device file 
		(e.g. USB) or a serial device.
	      </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-power-management">
      <title>
        power_management namespace
      </title>
      <para>
        Keys with the prefix <literal>power_management</literal>
        provide information about power management supported by
        the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>power_management.type</literal> (string)
              </entry>
              <entry>Examples:
                <literal>apm</literal>,
                <literal>acpi</literal>,
                <literal>pmu</literal>
              </entry>
              <entry>Yes</entry>
              <entry>
                The power management subsystem used on the computer.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.can_suspend</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                If suspend support is compiled into the kernel.
                NB. This may not mean the machine is able to suspend
                successfully.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.can_suspend_hybrid</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                If the system is capable of hybrid suspend.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.can_hibernate</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                If hibernation support is compiled into the kernel.
                NB. This may not mean the machine is able to hibernate
                successfully.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.is_powersave_set</literal> (bool)
              </entry>
              <entry/>
              <entry>Yes</entry>
              <entry>
                Is the last value passed to the SetPowerSave method.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.s3_bios</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Use the S3_BIOS kernel command for suspend.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.s3_mode</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Use the S3_MODE kernel command for suspend.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.dpms_suspend</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Suspend the video card via DPMS on suspend.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.vga_mode_3</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Reset the VGA text mode to mode 3 on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.dpms_on</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Reactivate the screen with DPMS on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.vbe_post</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Run the VGA BIOS Power On Self Test (POST) on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.vbestate_restore</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Save the VGA BIOS state before suspend, and restore it on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.vbemode_restore</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Save the VGA BIOS mode before suspend, and restore it on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.radeon_off</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Turn off the Radeon DAC off before suspend.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.reset_brightness</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Reset the brightness state after resume.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.no_fb</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>True if the machine can only suspend when not using framebuffer.</entry>
            </row>
            <row>
              <entry>
                <literal>power_management.quirk.none</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>No quirks are necessary for suspend or resume.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-tape">
      <title>
        tape namespace
      </title>
      <para>
        Device objects with the capability <literal>tape</literal>
        represent tape devices.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>tape.major</literal> (int)
              </entry>
              <entry>example: 254</entry>
              <entry>Yes</entry>
              <entry>The device's major number</entry>
            </row>
            <row>
              <entry>
                <literal>tape.minor</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>The device's minor number</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-killswitch">
      <title>
        killswitch namespace
      </title>
      <para>
        Device objects with the capability <literal>killswitch</literal>
        represent switches to turn a radio on and off. See also <xref linkend="interface-device-killswitch"/>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>killswitch.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Type of the kill switch</entry>
            </row>
            <row>
              <entry></entry>
              <entry>wlan</entry>
              <entry></entry>
              <entry>Kill switch is for turning Wireless LAN (WLAN) networking on/off</entry>
            </row>
            <row>
              <entry></entry>
              <entry>bluetooth</entry>
              <entry></entry>
              <entry>Kill switch is for turning Bluetooth on/off</entry>
            </row>
            <row>
              <entry></entry>
              <entry>wwan</entry>
              <entry></entry>
              <entry>Kill switch is for turning Wireless WAN (WWAN) networking on/off</entry>
            </row>
            <row>
              <entry>
                <literal>killswitch.access_method</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>How HAL should program the switch</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-video4linux">
      <title>
        video4linux namespace
      </title>
      <para>
        Device objects with the capability <literal>video4linux</literal>
        represent Video4Linux devices.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>video4linux.device</literal> (string)
              </entry>
              <entry>Example: /dev/video0</entry>
              <entry>Yes</entry>
              <entry>The device node to access the Video4Linux device.</entry>
            </row>
            <row>
              <entry>
                <literal>video4linux.version</literal> (string)
              </entry>
              <entry>Example: 2</entry>
              <entry>Yes</entry>
              <entry>
                The highest Video4Linux API version supported by the device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-video4linux-video-capture">
      <title>
        video4linux.video_capture namespace
      </title>
      <para>
        The video4linux device can capture video.
        No namespace specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-video4linux-video-output">
      <title>
        video4linux.video_output namespace
      </title>
      <para>
        The video4linux device can output video.
        No namespace specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-video4linux-video-overlay">
      <title>
        video4linux.video_overlay namespace
      </title>
      <para>
        The video4linux device can overlay video.
        No namespace specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-video4linux-audio">
      <title>
        video4linux.audio namespace
      </title>
      <para>
        The video4linux device has audio inputs or outputs.
        No namespace specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-video4linux-tuner">
      <title>
        video4linux.tuner namespace
      </title>
      <para>
        The video4linux device has some sort of tuner or modulator to receive
        or emit RF-modulated video signals.
        No namespace specific properties.
      </para>
    </sect2>
    <sect2 id="device-properties-video4linux-radio">
      <title>
        video4linux.radio namespace
      </title>
      <para>
        The video4linux device is a radio device.
        No namespace specific properties.
      </para>
    </sect2>
  </sect1>

  <sect1 id="properties-misc">
    <title>Misc. Properties</title>
    <sect2 id="device-properties-access-control">
      <title>
        access_control namespace
      </title>
      <para>
        Device objects with the
        capability <literal>access_control</literal> represent devices
        where access to a special device file can be granted/revoked
        to unprivileged users.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>access_control.file</literal> (string)
              </entry>
              <entry>Example: /dev/snd/pcmC0D1p</entry>
              <entry>Yes</entry>
              <entry>
                Name of the special device file that access can be granted to.
              </entry>
            </row>
            <row>
              <entry>
                <literal>access_control.type</literal> (string)
              </entry>
              <entry>Example: cdrom</entry>
              <entry>Yes</entry>
              <entry>
                Type of access - only makes sense when PolicyKit
                support is enabled; it's used by PolicyKit to compute
                what privilege to check for by
                prepending <literal>hal-device-file-</literal> to the
                value.
              </entry>
            </row>
            <row>
              <entry>
                <literal>access_control.grant_user</literal> (strlist)
              </entry>
              <entry>Example: "gdm, flumotion"</entry>
              <entry>No</entry>
              <entry>
                List of UNIX user names to always grant access to the
                device. This is useful for 3rd party system-wide
                packages that need access to a device to function
                properly.
              </entry>
            </row>
            <row>
              <entry>
                <literal>access_control.grant_group</literal> (strlist)
              </entry>
              <entry>Example: "pvr_software, staff"</entry>
              <entry>No</entry>
              <entry>
                List of UNIX group names to always grant access to the
                device. This is useful for 3rd party system-wide
                packages that need access to a device to function
                properly.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        See also <xref linkend="interface-device-accesscontrol"/>.
      </para>
    </sect2>
  </sect1>

  <sect1 id="properties-deprecated">
    <title>Deprecated Properties</title>
    <para>
      The section represents properties that are deprecated and should be no longer used. 
      The properties/keys will be removed, but not before the date in the following table:
    </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Replacement</entry>
              <entry>Remove (date)</entry>
              <entry>Notes</entry>
            </row>
          </thead>
          <tbody>
            <row>
                <entry><literal>portable_audio_player.access_method</literal> (string)</entry>
                <entry><literal>portable_audio_player.access_method.[drivers, protocols]</literal> (strlist)</entry>
                <entry>2008-05-03</entry>
                <entry>Original entry can only indicate UMS or userspace driver devices, while some devices can be both.  New structure doesn't have this limitation.</entry>
            </row>
            <row>
                <entry><literal>portable_audio_player.type</literal> (string)</entry>
                <entry><literal>portable_audio_player.access_method.[drivers, protocols]</literal> (strlist)</entry>
                <entry>2008-05-03</entry>
                <entry>New structure allows for better definition of access protocols and handlers.</entry>
            </row>
            <row>
              <entry><literal>power_management.can_suspend_to_ram</literal> (bool)</entry>
              <entry><literal>power_management.can_suspend</literal></entry>
              <entry>2007-05-01</entry>
              <entry></entry>
            </row>
            <row>
              <entry><literal>power_management.can_suspend_to_disk</literal> (bool)</entry>
              <entry><literal>power_management.can_hibernate</literal></entry>
              <entry>2007-05-01</entry>
              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
  </sect1>

</chapter>
